file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1707, 1], edge_index=[2, 6736], edge_attr=[6736, 2], y=[12, 0], batch=[1707], ptr=[13])
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 27, in main
    print(batch.extra_x)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch_geometric/data/data.py", line 559, in __getattr__
    return getattr(self._store, key)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch_geometric/data/storage.py", line 96, in __getattr__
    raise AttributeError(
AttributeError: 'GlobalStorage' object has no attribute 'extra_x'

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1710, 1], edge_index=[2, 7438], edge_attr=[7438, 2], y=[12, 0], batch=[1710], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([12, 150, 1]) torch.Size([12, 150, 6])
Applying noise...
Predicting...
torch.Size([2, 150, 1]) torch.Size([2, 150, 6])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1730, 1], edge_index=[2, 8298], edge_attr=[8298, 2], y=[12, 0], batch=[1730], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7296], edge_attr=[7296, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.0770],
         [1.0736],
         [1.1484],
         ...,
         [1.0505],
         [1.1262],
         [1.0770]],

        [[1.0671],
         [1.0932],
         [1.0852],
         ...,
         [1.0849],
         [1.1195],
         [1.0915]],

        [[1.1039],
         [1.0765],
         [1.0796],
         ...,
         [1.0795],
         [1.0686],
         [1.0873]],

        ...,

        [[1.0769],
         [1.0578],
         [1.0919],
         ...,
         [1.0694],
         [1.0697],
         [1.1055]],

        [[1.1155],
         [1.0985],
         [1.0841],
         ...,
         [1.1945],
         [1.1943],
         [1.0843]],

        [[1.1035],
         [1.0856],
         [1.0789],
         ...,
         [1.1308],
         [1.1849],
         [1.1364]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.0823],
         [1.1341],
         [1.0950],
         ...,
         [1.0861],
         [1.0852],
         [1.1070]],

        [[1.1609],
         [1.1393],
         [1.1461],
         ...,
         [0.0000],
         [0.0000],
         [0.0000]],

        [[1.1693],
         [1.0821],
         [1.1123],
         ...,
         [1.0744],
         [1.0792],
         [1.0777]],

        ...,

        [[1.0951],
         [1.0966],
         [1.0973],
         ...,
         [1.0812],
         [1.0931],
         [1.0732]],

        [[1.0880],
         [1.1063],
         [1.1263],
         ...,
         [1.1169],
         [1.1020],
         [1.0840]],

        [[1.1304],
         [1.0706],
         [1.0940],
         ...,
         [1.0846],
         [1.0908],
         [1.1082]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1000],
         [1.0944],
         [1.0822],
         ...,
         [1.0835],
         [1.1057],
         [1.1050]],

        [[1.0773],
         [1.0736],
         [1.0873],
         ...,
         [1.1946],
         [1.0774],
         [1.0779]],

        [[1.0498],
         [1.0487],
         [1.0976],
         ...,
         [1.0540],
         [1.0529],
         [1.0514]],

        ...,

        [[1.0766],
         [1.1079],
         [1.0917],
         ...,
         [1.0774],
         [1.0899],
         [1.0740]],

        [[1.0777],
         [1.0904],
         [1.0872],
         ...,
         [1.0755],
         [1.0981],
         [1.1075]],

        [[1.0866],
         [1.0764],
         [1.0604],
         ...,
         [1.0821],
         [1.1199],
         [1.0937]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.0827],
         [1.0895],
         [1.0806],
         ...,
         [1.0788],
         [1.1065],
         [1.0646]],

        [[1.0824],
         [1.0867],
         [1.0977],
         ...,
         [1.1922],
         [1.0946],
         [1.0812]],

        [[1.0850],
         [1.0690],
         [1.0595],
         ...,
         [1.1195],
         [1.1476],
         [1.0750]],

        ...,

        [[1.1111],
         [1.1254],
         [1.0883],
         ...,
         [1.0877],
         [1.0850],
         [1.0827]],

        [[1.1773],
         [1.1967],
         [1.0836],
         ...,
         [1.0824],
         [1.0766],
         [1.0944]],

        [[1.0876],
         [1.0823],
         [1.1524],
         ...,
         [1.1041],
         [1.0955],
         [1.1055]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1048],
         [1.0963],
         [1.0858],
         ...,
         [1.1108],
         [1.0885],
         [1.1102]],

        [[1.1562],
         [1.1318],
         [1.1024],
         ...,
         [1.0839],
         [1.2021],
         [1.1381]],

        [[1.1928],
         [1.0759],
         [1.1841],
         ...,
         [1.0844],
         [1.0927],
         [1.1011]],

        ...,

        [[1.0943],
         [1.0896],
         [1.1076],
         ...,
         [1.0839],
         [1.1023],
         [1.1817]],

        [[1.1038],
         [1.2019],
         [1.1267],
         ...,
         [1.0868],
         [1.0871],
         [1.0979]],

        [[1.1529],
         [1.1815],
         [1.1709],
         ...,
         [1.0776],
         [1.0862],
         [1.1897]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.0987],
         [1.0777],
         [1.0856],
         ...,
         [1.1513],
         [1.0797],
         [1.1451]],

        [[1.0678],
         [1.0633],
         [1.0838],
         ...,
         [1.1011],
         [1.0845],
         [1.0746]],

        [[1.0918],
         [1.1152],
         [1.0960],
         ...,
         [1.0952],
         [1.1020],
         [1.1263]],

        ...,

        [[1.0775],
         [1.0777],
         [1.0894],
         ...,
         [1.0787],
         [1.0632],
         [1.0616]],

        [[1.0798],
         [1.1938],
         [1.1314],
         ...,
         [1.1019],
         [1.0948],
         [1.0775]],

        [[1.0772],
         [1.0884],
         [1.0734],
         ...,
         [1.0768],
         [1.1077],
         [1.0867]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1852],
         [1.1112],
         [1.1757],
         ...,
         [1.0798],
         [1.0871],
         [1.1010]],

        [[1.1421],
         [1.1798],
         [1.1894],
         ...,
         [0.0000],
         [0.0000],
         [0.0000]],

        [[1.0656],
         [1.0535],
         [1.0896],
         ...,
         [1.0561],
         [1.0684],
         [1.1003]],

        ...,

        [[1.1974],
         [1.0973],
         [1.1186],
         ...,
         [0.0000],
         [0.0000],
         [0.0000]],

        [[1.1496],
         [1.1127],
         [1.0838],
         ...,
         [1.1085],
         [1.0996],
         [1.0989]],

        [[1.1472],
         [1.0793],
         [1.1186],
         ...,
         [1.1588],
         [1.0852],
         [1.0878]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1320],
         [1.1097],
         [1.1416],
         ...,
         [0.0000],
         [0.0000],
         [0.0000]],

        [[1.0735],
         [1.0865],
         [1.0733],
         ...,
         [1.0911],
         [1.0834],
         [1.1155]],

        [[1.0740],
         [1.1020],
         [1.1918],
         ...,
         [1.0711],
         [1.1023],
         [1.0888]],

        ...,

        [[1.0890],
         [1.1285],
         [1.1675],
         ...,
         [1.0777],
         [1.0854],
         [1.0774]],

        [[1.1747],
         [1.0694],
         [1.0972],
         ...,
         [1.0832],
         [1.0822],
         [1.0913]],

        [[1.0900],
         [1.2006],
         [1.0827],
         ...,
         [1.1081],
         [1.1154],
         [1.0974]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1924],
         [1.0708],
         [1.1925],
         ...,
         [1.1067],
         [1.0744],
         [1.0855]],

        [[1.1856],
         [1.1824],
         [1.0888],
         ...,
         [1.1084],
         [1.0729],
         [1.1219]],

        [[1.0860],
         [1.0848],
         [1.1000],
         ...,
         [1.0745],
         [1.0854],
         [1.0700]],

        ...,

        [[1.1644],
         [1.1257],
         [1.1381],
         ...,
         [1.1894],
         [1.0867],
         [1.0854]],

        [[1.0822],
         [1.0894],
         [1.1979],
         ...,
         [1.1076],
         [1.0840],
         [1.0892]],

        [[1.0643],
         [1.0591],
         [1.0699],
         ...,
         [1.0764],
         [1.0662],
         [1.0627]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1011],
         [1.0741],
         [1.1093],
         ...,
         [1.0908],
         [1.0771],
         [1.0830]],

        [[1.1174],
         [1.0746],
         [1.0789],
         ...,
         [1.1160],
         [1.0754],
         [1.1012]],

        [[1.0685],
         [1.0947],
         [1.1427],
         ...,
         [1.1931],
         [1.0850],
         [1.0909]],

        ...,

        [[1.0834],
         [1.1024],
         [1.0829],
         ...,
         [1.0900],
         [1.0982],
         [1.0813]],

        [[1.0829],
         [1.0885],
         [1.0869],
         ...,
         [1.0925],
         [1.0766],
         [1.1068]],

        [[1.1838],
         [1.0915],
         [1.0753],
         ...,
         [1.0823],
         [1.1240],
         [1.1888]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.0980],
         [1.0727],
         [1.1557],
         ...,
         [1.0900],
         [1.1019],
         [1.0856]],

        [[1.0936],
         [1.1056],
         [1.0929],
         ...,
         [1.0829],
         [1.0922],
         [1.1032]],

        [[1.0690],
         [1.0989],
         [1.0938],
         ...,
         [1.0802],
         [1.0884],
         [1.0862]],

        ...,

        [[1.0995],
         [1.1073],
         [1.0945],
         ...,
         [1.1133],
         [1.0943],
         [1.1215]],

        [[1.0896],
         [1.0948],
         [1.0937],
         ...,
         [1.0806],
         [1.1380],
         [1.0798]],

        [[1.0944],
         [1.0901],
         [1.1049],
         ...,
         [1.0994],
         [1.1046],
         [1.0922]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[1.1149],
         [1.1265],
         [1.1605],
         ...,
         [0.0000],
         [0.0000],
         [0.0000]],

        [[1.1040],
         [1.1142],
         [1.0893],
         ...,
         [1.1009],
         [1.0838],
         [1.0807]],

        [[1.0854],
         [1.1147],
         [1.1117],
         ...,
         [1.0816],
         [1.0932],
         [1.0857]],

        ...,

        [[1.1009],
         [1.1025],
         [1.1086],
         ...,
         [1.1083],
         [1.1122],
         [1.0939]],

        [[1.0894],
         [1.0835],
         [1.0865],
         ...,
         [1.0758],
         [1.1452],
         [1.0959]],

        [[1.0720],
         [1.1798],
         [1.0840],
         ...,
         [1.0795],
         [1.0893],
         [1.1513]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
tensor([[[1.1192],
         [1.1153],
         [1.0909],
         [1.1049],
         [1.1836],
         [1.1154],
         [1.1162],
         [1.0882],
         [1.0862],
         [1.0945],
         [1.1901],
         [1.0992],
         [1.2005],
         [1.1529],
         [1.0906],
         [1.1534],
         [1.0821],
         [1.1009],
         [1.0989],
         [1.0985],
         [1.0897],
         [1.1206],
         [1.1322],
         [1.0981],
         [1.0891],
         [1.1001],
         [1.0912],
         [1.1486],
         [1.1519],
         [1.1909],
         [1.1277],
         [1.1028],
         [1.0916],
         [1.0851],
         [1.1931],
         [1.1633],
         [1.1594],
         [1.1930],
         [1.1051],
         [1.0902],
         [1.1272],
         [1.1047],
         [1.0811],
         [1.1239],
         [1.1033],
         [1.1778],
         [1.1231],
         [1.0985],
         [1.1548],
         [1.0885],
         [1.1002],
         [1.0824],
         [1.0981],
         [1.0915],
         [1.0919],
         [1.0949],
         [1.1009],
         [1.0934],
         [1.1076],
         [1.1269],
         [1.0920],
         [1.0908],
         [1.1297],
         [1.0991],
         [1.0964],
         [1.1293],
         [1.1237],
         [1.0918],
         [1.1242],
         [1.0969],
         [1.1046],
         [1.0919],
         [1.1121],
         [1.1026],
         [1.1637],
         [1.0985],
         [1.0885],
         [1.0965],
         [1.1040],
         [1.0874],
         [1.0988],
         [1.1086],
         [1.1075],
         [1.1875],
         [1.0808],
         [1.0995],
         [1.1017],
         [1.0984],
         [1.0838],
         [1.0872],
         [1.1125],
         [1.1743],
         [1.0952],
         [1.0950],
         [1.0991],
         [1.0729],
         [1.1137],
         [1.0937],
         [1.0834],
         [1.1079],
         [1.1268],
         [1.0816],
         [1.0733],
         [1.0891],
         [1.1098],
         [1.0967],
         [1.1037],
         [1.0841],
         [1.1972],
         [1.1142],
         [1.1189],
         [1.0741],
         [1.1061],
         [1.0990],
         [1.0894],
         [1.1461],
         [1.0840],
         [1.0918],
         [1.1655],
         [1.2010],
         [1.0809],
         [1.0808],
         [1.1061],
         [1.1150],
         [1.1820],
         [1.1236],
         [1.1135],
         [1.1921],
         [1.1004],
         [1.0917],
         [1.0988],
         [1.0821],
         [1.1000],
         [1.0848],
         [1.0783],
         [1.1771],
         [1.0993],
         [1.0980],
         [1.1054],
         [1.0879],
         [1.0877],
         [1.1674],
         [1.1177],
         [1.1105],
         [1.0765],
         [1.1105],
         [1.1499],
         [1.0983],
         [1.1020],
         [1.0984]],

        [[1.2026],
         [1.1121],
         [1.0952],
         [1.1033],
         [1.1450],
         [1.0804],
         [1.0991],
         [1.1837],
         [1.0754],
         [1.0784],
         [1.0979],
         [1.1214],
         [1.0922],
         [1.0924],
         [1.0852],
         [1.0840],
         [1.0956],
         [1.1161],
         [1.1125],
         [1.0858],
         [1.1066],
         [1.0992],
         [1.1412],
         [1.1918],
         [1.1713],
         [1.0773],
         [1.0769],
         [1.1008],
         [1.0833],
         [1.1619],
         [1.0807],
         [1.0936],
         [1.0934],
         [1.1993],
         [1.0692],
         [1.1109],
         [1.0891],
         [1.1219],
         [1.0923],
         [1.0738],
         [1.1018],
         [1.1198],
         [1.0946],
         [1.0886],
         [1.0864],
         [1.0845],
         [1.0886],
         [1.0868],
         [1.0956],
         [1.0808],
         [1.0946],
         [1.0788],
         [1.1359],
         [1.0980],
         [1.0835],
         [1.0914],
         [1.0971],
         [1.0781],
         [1.0969],
         [1.0842],
         [1.0832],
         [1.0982],
         [1.1111],
         [1.1856],
         [1.0661],
         [1.0686],
         [1.0704],
         [1.1267],
         [1.0797],
         [1.0867],
         [1.0959],
         [1.0864],
         [1.1196],
         [1.0918],
         [1.0836],
         [1.0879],
         [1.1714],
         [1.0818],
         [1.1027],
         [1.0764],
         [1.0770],
         [1.1215],
         [1.0973],
         [1.0915],
         [1.0829],
         [1.1626],
         [1.0971],
         [1.0775],
         [1.1492],
         [1.1055],
         [1.0808],
         [1.0895],
         [1.0838],
         [1.1508],
         [1.0834],
         [1.0931],
         [1.0656],
         [1.0828],
         [1.0889],
         [1.0893],
         [1.1001],
         [1.1082],
         [1.0945],
         [1.0900],
         [1.0948],
         [1.1032],
         [1.0912],
         [1.0726],
         [1.1110],
         [1.1681],
         [1.0959],
         [1.0980],
         [1.0758],
         [1.1010],
         [1.1845],
         [1.0955],
         [1.1942],
         [1.0961],
         [1.0932],
         [1.0811],
         [1.1681],
         [1.0922],
         [1.1238],
         [1.0877],
         [1.1239],
         [1.1004],
         [1.0884],
         [1.0932],
         [1.1247],
         [1.1549],
         [1.2019],
         [1.1026],
         [1.0858],
         [1.0768],
         [1.0913],
         [1.1818],
         [1.1746],
         [1.0923],
         [1.0983],
         [1.1182],
         [1.0989],
         [1.0821],
         [1.1093],
         [1.0817],
         [1.0671],
         [1.0803],
         [1.0892],
         [1.1021],
         [1.1033],
         [1.0812]]], device='cuda:0')
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7298], edge_attr=[7298, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6874, -1.0696],
          [ 2.6904, -1.0681],
          ...,
          [ 2.7013, -1.0549],
          [ 2.6696, -0.8815],
          [ 2.6774, -0.8876]],

         [[ 2.6874, -1.0696],
          [ 0.0000, -0.0000],
          [ 2.6548, -0.8761],
          ...,
          [ 2.6885, -1.0652],
          [ 2.6806, -1.0716],
          [ 2.6826, -1.0770]],

         [[ 2.6904, -1.0681],
          [ 2.6548, -0.8761],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6654, -0.8786],
          [ 2.6531, -0.8740],
          [ 2.6838, -1.0765]],

         ...,

         [[ 2.7013, -1.0549],
          [ 2.6885, -1.0652],
          [ 2.6654, -0.8786],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6668, -0.8789],
          [ 2.6736, -0.8843]],

         [[ 2.6696, -0.8815],
          [ 2.6806, -1.0716],
          [ 2.6531, -0.8740],
          ...,
          [ 2.6668, -0.8789],
          [ 0.0000, -0.0000],
          [ 2.6842, -1.0752]],

         [[ 2.6774, -0.8876],
          [ 2.6826, -1.0770],
          [ 2.6838, -1.0765],
          ...,
          [ 2.6736, -0.8843],
          [ 2.6842, -1.0752],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6697, -1.0595],
          [ 2.6829, -1.0493],
          ...,
          [ 2.6719, -1.0610],
          [ 2.6729, -1.0612],
          [ 2.6827, -1.0509]],

         [[ 2.6697, -1.0595],
          [ 0.0000, -0.0000],
          [ 2.6794, -1.0532],
          ...,
          [ 2.6485, -0.8748],
          [ 2.6506, -0.8753],
          [ 2.6742, -0.8866]],

         [[ 2.6829, -1.0493],
          [ 2.6794, -1.0532],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6527, -0.8745],
          [ 2.6822, -1.0542],
          [ 2.6825, -0.8922]],

         ...,

         [[ 2.6719, -1.0610],
          [ 2.6485, -0.8748],
          [ 2.6527, -0.8745],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6578, -0.8805],
          [ 2.6826, -0.8933]],

         [[ 2.6729, -1.0612],
          [ 2.6506, -0.8753],
          [ 2.6822, -1.0542],
          ...,
          [ 2.6578, -0.8805],
          [ 0.0000, -0.0000],
          [ 2.6848, -1.0548]],

         [[ 2.6827, -1.0509],
          [ 2.6742, -0.8866],
          [ 2.6825, -0.8922],
          ...,
          [ 2.6826, -0.8933],
          [ 2.6848, -1.0548],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6875, -0.8966],
          [ 2.6208, -0.8497],
          ...,
          [ 2.6570, -0.9871],
          [ 2.7268, -0.9249],
          [ 2.6150, -0.8459]],

         [[ 2.6875, -0.8966],
          [ 0.0000, -0.0000],
          [ 2.6614, -1.0524],
          ...,
          [ 2.7317, -0.9246],
          [ 2.6750, -0.8894],
          [ 2.6516, -1.0514]],

         [[ 2.6208, -0.8497],
          [ 2.6614, -1.0524],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6330, -0.8328],
          [ 2.6537, -1.0469],
          [ 2.6277, -1.0575]],

         ...,

         [[ 2.6570, -0.9871],
          [ 2.7317, -0.9246],
          [ 2.6330, -0.8328],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6631, -0.9907],
          [ 2.6226, -0.8229]],

         [[ 2.7268, -0.9249],
          [ 2.6750, -0.8894],
          [ 2.6537, -1.0469],
          ...,
          [ 2.6631, -0.9907],
          [ 0.0000, -0.0000],
          [ 2.6092, -0.8482]],

         [[ 2.6150, -0.8459],
          [ 2.6516, -1.0514],
          [ 2.6277, -1.0575],
          ...,
          [ 2.6226, -0.8229],
          [ 2.6092, -0.8482],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6492, -1.0238],
          [ 2.6471, -1.0376],
          ...,
          [ 2.6115, -0.8418],
          [ 2.6001, -1.0302],
          [ 2.6529, -1.0178]],

         [[ 2.6492, -1.0238],
          [ 0.0000, -0.0000],
          [ 2.6775, -1.0326],
          ...,
          [ 2.7374, -0.9293],
          [ 2.6176, -1.0070],
          [ 2.6963, -1.0408]],

         [[ 2.6471, -1.0376],
          [ 2.6775, -1.0326],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6787, -1.0204],
          [ 2.6192, -1.0286],
          [ 2.6728, -0.8791]],

         ...,

         [[ 2.6115, -0.8418],
          [ 2.7374, -0.9293],
          [ 2.6787, -1.0204],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6241, -1.0129],
          [ 2.7328, -0.9265]],

         [[ 2.6001, -1.0302],
          [ 2.6176, -1.0070],
          [ 2.6192, -1.0286],
          ...,
          [ 2.6241, -1.0129],
          [ 0.0000, -0.0000],
          [ 2.5869, -0.8185]],

         [[ 2.6529, -1.0178],
          [ 2.6963, -1.0408],
          [ 2.6728, -0.8791],
          ...,
          [ 2.7328, -0.9265],
          [ 2.5869, -0.8185],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6638, -1.0638],
          [ 2.6459, -0.8703],
          ...,
          [ 2.6296, -0.8649],
          [ 2.5960, -0.8492],
          [ 2.6683, -1.0598]],

         [[ 2.6638, -1.0638],
          [ 0.0000, -0.0000],
          [ 2.6840, -1.0638],
          ...,
          [ 2.6753, -1.0711],
          [ 2.6575, -1.0604],
          [ 2.6825, -1.0647]],

         [[ 2.6459, -0.8703],
          [ 2.6840, -1.0638],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6716, -0.8882],
          [ 2.6659, -1.0555],
          [ 2.6906, -1.0602]],

         ...,

         [[ 2.6296, -0.8649],
          [ 2.6753, -1.0711],
          [ 2.6716, -0.8882],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6132, -0.8565],
          [ 2.6800, -1.0658]],

         [[ 2.5960, -0.8492],
          [ 2.6575, -1.0604],
          [ 2.6659, -1.0555],
          ...,
          [ 2.6132, -0.8565],
          [ 0.0000, -0.0000],
          [ 2.6257, -0.8587]],

         [[ 2.6683, -1.0598],
          [ 2.6825, -1.0647],
          [ 2.6906, -1.0602],
          ...,
          [ 2.6800, -1.0658],
          [ 2.6257, -0.8587],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.7131, -0.9222],
          [ 2.6865, -1.0536],
          ...,
          [ 2.6472, -1.0662],
          [ 2.6578, -0.8903],
          [ 2.6665, -1.0701]],

         [[ 2.7131, -0.9222],
          [ 0.0000, -0.0000],
          [ 2.6909, -1.0499],
          ...,
          [ 2.6193, -0.8555],
          [ 2.6839, -1.0653],
          [ 2.6552, -0.8796]],

         [[ 2.6865, -1.0536],
          [ 2.6909, -1.0499],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6522, -1.0587],
          [ 2.6793, -1.0637],
          [ 2.6304, -0.8695]],

         ...,

         [[ 2.6472, -1.0662],
          [ 2.6193, -0.8555],
          [ 2.6522, -1.0587],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6434, -1.0735],
          [ 2.6386, -1.0750]],

         [[ 2.6578, -0.8903],
          [ 2.6839, -1.0653],
          [ 2.6793, -1.0637],
          ...,
          [ 2.6434, -1.0735],
          [ 0.0000, -0.0000],
          [ 2.6606, -1.0766]],

         [[ 2.6665, -1.0701],
          [ 2.6552, -0.8796],
          [ 2.6304, -0.8695],
          ...,
          [ 2.6386, -1.0750],
          [ 2.6606, -1.0766],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6194, -1.0352],
          [ 2.7432, -0.9456],
          ...,
          [ 2.6639, -0.9897],
          [ 2.6959, -1.0406],
          [ 2.7022, -0.9112]],

         [[ 2.6194, -1.0352],
          [ 0.0000, -0.0000],
          [ 2.6235, -1.0201],
          ...,
          [ 2.5417, -0.7706],
          [ 2.6227, -1.0373],
          [ 2.6235, -1.0515]],

         [[ 2.7432, -0.9456],
          [ 2.6235, -1.0201],
          [ 0.0000, -0.0000],
          ...,
          [ 2.8089, -1.0132],
          [ 2.6872, -1.0159],
          [ 2.6876, -1.0211]],

         ...,

         [[ 2.6639, -0.9897],
          [ 2.5417, -0.7706],
          [ 2.8089, -1.0132],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6658, -0.9883],
          [ 2.6698, -0.9872]],

         [[ 2.6959, -1.0406],
          [ 2.6227, -1.0373],
          [ 2.6872, -1.0159],
          ...,
          [ 2.6658, -0.9883],
          [ 0.0000, -0.0000],
          [ 2.6958, -0.9068]],

         [[ 2.7022, -0.9112],
          [ 2.6235, -1.0515],
          [ 2.6876, -1.0211],
          ...,
          [ 2.6698, -0.9872],
          [ 2.6958, -0.9068],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.5300, -0.9993],
          [ 2.4292, -0.7641],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.5300, -0.9993],
          [ 0.0000, -0.0000],
          [ 2.6023, -1.0456],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.4292, -0.7641],
          [ 2.6023, -1.0456],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         ...,

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6780, -1.0521],
          [ 2.6951, -1.0506],
          ...,
          [ 2.6395, -0.8616],
          [ 2.6712, -0.8825],
          [ 2.6865, -1.0504]],

         [[ 2.6780, -1.0521],
          [ 0.0000, -0.0000],
          [ 2.6818, -1.0632],
          ...,
          [ 2.6253, -0.8629],
          [ 2.6498, -0.8745],
          [ 2.6730, -1.0688]],

         [[ 2.6951, -1.0506],
          [ 2.6818, -1.0632],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6626, -0.8774],
          [ 2.6864, -1.0603],
          [ 2.7089, -0.9108]],

         ...,

         [[ 2.6395, -0.8616],
          [ 2.6253, -0.8629],
          [ 2.6626, -0.8774],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6599, -1.0594],
          [ 2.6639, -1.0636]],

         [[ 2.6712, -0.8825],
          [ 2.6498, -0.8745],
          [ 2.6864, -1.0603],
          ...,
          [ 2.6599, -1.0594],
          [ 0.0000, -0.0000],
          [ 2.6662, -0.8838]],

         [[ 2.6865, -1.0504],
          [ 2.6730, -1.0688],
          [ 2.7089, -0.9108],
          ...,
          [ 2.6639, -1.0636],
          [ 2.6662, -0.8838],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6324, -0.8673],
          [ 2.6848, -1.0389],
          ...,
          [ 2.7834, -0.9868],
          [ 2.7382, -0.9448],
          [ 2.6828, -0.9023]],

         [[ 2.6324, -0.8673],
          [ 0.0000, -0.0000],
          [ 2.6680, -1.0548],
          ...,
          [ 2.6285, -0.9475],
          [ 2.6418, -0.8687],
          [ 2.6616, -1.0762]],

         [[ 2.6848, -1.0389],
          [ 2.6680, -1.0548],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6421, -0.9803],
          [ 2.6823, -1.0329],
          [ 2.6858, -0.9037]],

         ...,

         [[ 2.7834, -0.9868],
          [ 2.6285, -0.9475],
          [ 2.6421, -0.9803],
          ...,
          [ 0.0000, -0.0000],
          [ 2.8025, -1.0141],
          [ 2.7228, -0.9167]],

         [[ 2.7382, -0.9448],
          [ 2.6418, -0.8687],
          [ 2.6823, -1.0329],
          ...,
          [ 2.8025, -1.0141],
          [ 0.0000, -0.0000],
          [ 2.6826, -1.0499]],

         [[ 2.6828, -0.9023],
          [ 2.6616, -1.0762],
          [ 2.6858, -0.9037],
          ...,
          [ 2.7228, -0.9167],
          [ 2.6826, -1.0499],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6166, -0.8703],
          [ 2.6518, -1.0819],
          ...,
          [ 2.6731, -1.0779],
          [ 2.6322, -0.8763],
          [ 2.6437, -0.8801]],

         [[ 2.6166, -0.8703],
          [ 0.0000, -0.0000],
          [ 2.6571, -1.0832],
          ...,
          [ 2.6540, -0.8846],
          [ 2.6742, -1.0879],
          [ 2.6768, -1.0849]],

         [[ 2.6518, -1.0819],
          [ 2.6571, -1.0832],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6716, -1.0774],
          [ 2.6262, -0.8734],
          [ 2.6370, -0.8765]],

         ...,

         [[ 2.6731, -1.0779],
          [ 2.6540, -0.8846],
          [ 2.6716, -1.0774],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6896, -1.0833],
          [ 2.6938, -0.9094]],

         [[ 2.6322, -0.8763],
          [ 2.6742, -1.0879],
          [ 2.6262, -0.8734],
          ...,
          [ 2.6896, -1.0833],
          [ 0.0000, -0.0000],
          [ 2.6870, -1.0883]],

         [[ 2.6437, -0.8801],
          [ 2.6768, -1.0849],
          [ 2.6370, -0.8765],
          ...,
          [ 2.6938, -0.9094],
          [ 2.6870, -1.0883],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6826, -0.9044],
          [ 2.6846, -1.0747],
          ...,
          [ 2.6853, -1.0637],
          [ 2.6165, -0.8614],
          [ 2.6111, -0.8562]],

         [[ 2.6826, -0.9044],
          [ 0.0000, -0.0000],
          [ 2.6492, -0.8895],
          ...,
          [ 2.6771, -1.0980],
          [ 2.6685, -1.0956],
          [ 2.6602, -1.0961]],

         [[ 2.6846, -1.0747],
          [ 2.6492, -0.8895],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6727, -1.0980],
          [ 2.6006, -0.8658],
          [ 2.6001, -0.8674]],

         ...,

         [[ 2.6853, -1.0637],
          [ 2.6771, -1.0980],
          [ 2.6727, -1.0980],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6686, -1.0983],
          [ 2.6572, -1.0988]],

         [[ 2.6165, -0.8614],
          [ 2.6685, -1.0956],
          [ 2.6006, -0.8658],
          ...,
          [ 2.6686, -1.0983],
          [ 0.0000, -0.0000],
          [ 2.6526, -1.1005]],

         [[ 2.6111, -0.8562],
          [ 2.6602, -1.0961],
          [ 2.6001, -0.8674],
          ...,
          [ 2.6572, -1.0988],
          [ 2.6526, -1.1005],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6820, -1.0499],
          [ 2.6784, -0.8854],
          ...,
          [ 2.5999, -0.8472],
          [ 2.6552, -0.8748],
          [ 2.6799, -0.8875]],

         [[ 2.6820, -1.0499],
          [ 0.0000, -0.0000],
          [ 2.6990, -1.0492],
          ...,
          [ 2.6345, -0.8568],
          [ 2.7098, -0.9097],
          [ 2.7003, -1.0569]],

         [[ 2.6784, -0.8854],
          [ 2.6990, -1.0492],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6618, -1.0422],
          [ 2.6932, -1.0514],
          [ 2.7442, -0.9365]],

         ...,

         [[ 2.5999, -0.8472],
          [ 2.6345, -0.8568],
          [ 2.6618, -1.0422],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6541, -1.0512],
          [ 2.6601, -1.0472]],

         [[ 2.6552, -0.8748],
          [ 2.7098, -0.9097],
          [ 2.6932, -1.0514],
          ...,
          [ 2.6541, -1.0512],
          [ 0.0000, -0.0000],
          [ 2.6936, -1.0586]],

         [[ 2.6799, -0.8875],
          [ 2.7003, -1.0569],
          [ 2.7442, -0.9365],
          ...,
          [ 2.6601, -1.0472],
          [ 2.6936, -1.0586],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6676, -1.0656],
          [ 2.6814, -0.8732],
          ...,
          [ 2.6495, -1.0688],
          [ 2.6334, -0.8711],
          [ 2.6410, -1.0626]],

         [[ 2.6676, -1.0656],
          [ 0.0000, -0.0000],
          [ 2.6616, -0.9936],
          ...,
          [ 2.6642, -1.0625],
          [ 2.6805, -0.8978],
          [ 2.6560, -1.0564]],

         [[ 2.6814, -0.8732],
          [ 2.6616, -0.9936],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6653, -0.8612],
          [ 2.7299, -0.9183],
          [ 2.6352, -0.9544]],

         ...,

         [[ 2.6495, -1.0688],
          [ 2.6642, -1.0625],
          [ 2.6653, -0.8612],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6624, -1.0673],
          [ 2.6404, -1.0627]],

         [[ 2.6334, -0.8711],
          [ 2.6805, -0.8978],
          [ 2.7299, -0.9183],
          ...,
          [ 2.6624, -1.0673],
          [ 0.0000, -0.0000],
          [ 2.6547, -1.0611]],

         [[ 2.6410, -1.0626],
          [ 2.6560, -1.0564],
          [ 2.6352, -0.9544],
          ...,
          [ 2.6404, -1.0627],
          [ 2.6547, -1.0611],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6813, -0.9039],
          [ 2.7613, -0.9675],
          ...,
          [ 2.7194, -0.9308],
          [ 2.6839, -1.0780],
          [ 2.6919, -0.9113]],

         [[ 2.6813, -0.9039],
          [ 0.0000, -0.0000],
          [ 2.6682, -1.0233],
          ...,
          [ 2.6881, -1.0957],
          [ 2.6765, -1.1005],
          [ 2.6638, -0.8983]],

         [[ 2.7613, -0.9675],
          [ 2.6682, -1.0233],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6782, -1.0350],
          [ 2.6658, -1.0182],
          [ 2.6718, -1.0254]],

         ...,

         [[ 2.7194, -0.9308],
          [ 2.6881, -1.0957],
          [ 2.6782, -1.0350],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6818, -0.9070],
          [ 2.6914, -1.0949]],

         [[ 2.6839, -1.0780],
          [ 2.6765, -1.1005],
          [ 2.6658, -1.0182],
          ...,
          [ 2.6818, -0.9070],
          [ 0.0000, -0.0000],
          [ 2.6791, -1.0983]],

         [[ 2.6919, -0.9113],
          [ 2.6638, -0.8983],
          [ 2.6718, -1.0254],
          ...,
          [ 2.6914, -1.0949],
          [ 2.6791, -1.0983],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6760, -1.0750],
          [ 2.6512, -0.8765],
          ...,
          [ 2.6645, -1.0079],
          [ 2.6194, -0.8653],
          [ 2.6586, -0.8828]],

         [[ 2.6760, -1.0750],
          [ 0.0000, -0.0000],
          [ 2.6885, -1.0520],
          ...,
          [ 2.6708, -0.9995],
          [ 2.6339, -0.8693],
          [ 2.6829, -0.8985]],

         [[ 2.6512, -0.8765],
          [ 2.6885, -1.0520],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6588, -0.9727],
          [ 2.6292, -0.8639],
          [ 2.6801, -0.8960]],

         ...,

         [[ 2.6645, -1.0079],
          [ 2.6708, -0.9995],
          [ 2.6588, -0.9727],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6541, -0.9974],
          [ 2.6680, -0.9913]],

         [[ 2.6194, -0.8653],
          [ 2.6339, -0.8693],
          [ 2.6292, -0.8639],
          ...,
          [ 2.6541, -0.9974],
          [ 0.0000, -0.0000],
          [ 2.6685, -1.0678]],

         [[ 2.6586, -0.8828],
          [ 2.6829, -0.8985],
          [ 2.6801, -0.8960],
          ...,
          [ 2.6680, -0.9913],
          [ 2.6685, -1.0678],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6620, -1.0099],
          [ 2.6946, -0.8975],
          ...,
          [ 2.8053, -1.0110],
          [ 2.6565, -1.0133],
          [ 2.6515, -1.0247]],

         [[ 2.6620, -1.0099],
          [ 0.0000, -0.0000],
          [ 2.6644, -1.0809],
          ...,
          [ 2.6683, -1.0308],
          [ 2.6449, -1.0813],
          [ 2.6666, -0.8616]],

         [[ 2.6946, -0.8975],
          [ 2.6644, -1.0809],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6778, -1.0180],
          [ 2.6093, -0.8638],
          [ 2.7093, -0.9027]],

         ...,

         [[ 2.8053, -1.0110],
          [ 2.6683, -1.0308],
          [ 2.6778, -1.0180],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6438, -0.8604],
          [ 2.6493, -1.0007]],

         [[ 2.6565, -1.0133],
          [ 2.6449, -1.0813],
          [ 2.6093, -0.8638],
          ...,
          [ 2.6438, -0.8604],
          [ 0.0000, -0.0000],
          [ 2.6554, -0.8520]],

         [[ 2.6515, -1.0247],
          [ 2.6666, -0.8616],
          [ 2.7093, -0.9027],
          ...,
          [ 2.6493, -1.0007],
          [ 2.6554, -0.8520],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6502, -1.0901],
          [ 2.6177, -1.0753],
          ...,
          [ 2.6519, -1.0883],
          [ 2.6536, -1.0891],
          [ 2.5966, -0.8643]],

         [[ 2.6502, -1.0901],
          [ 0.0000, -0.0000],
          [ 2.6188, -1.0761],
          ...,
          [ 2.5997, -0.8656],
          [ 2.6017, -0.8662],
          [ 2.6559, -1.0913]],

         [[ 2.6177, -1.0753],
          [ 2.6188, -1.0761],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6180, -1.0721],
          [ 2.6188, -1.0722],
          [ 2.5537, -0.8456]],

         ...,

         [[ 2.6519, -1.0883],
          [ 2.5997, -0.8656],
          [ 2.6180, -1.0721],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6574, -1.0893],
          [ 2.6580, -1.0899]],

         [[ 2.6536, -1.0891],
          [ 2.6017, -0.8662],
          [ 2.6188, -1.0722],
          ...,
          [ 2.6574, -1.0893],
          [ 0.0000, -0.0000],
          [ 2.6088, -0.8688]],

         [[ 2.5966, -0.8643],
          [ 2.6559, -1.0913],
          [ 2.5537, -0.8456],
          ...,
          [ 2.6580, -1.0899],
          [ 2.6088, -0.8688],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6459, -1.0301],
          [ 2.6861, -1.0201],
          ...,
          [ 2.6893, -1.0208],
          [ 2.6884, -1.0220],
          [ 2.6642, -1.0273]],

         [[ 2.6459, -1.0301],
          [ 0.0000, -0.0000],
          [ 2.5845, -0.8442],
          ...,
          [ 2.6477, -1.0578],
          [ 2.5862, -0.8438],
          [ 2.5621, -0.8469]],

         [[ 2.6861, -1.0201],
          [ 2.5845, -0.8442],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6691, -0.8898],
          [ 2.6498, -0.8786],
          [ 2.5943, -0.8491]],

         ...,

         [[ 2.6893, -1.0208],
          [ 2.6477, -1.0578],
          [ 2.6691, -0.8898],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6749, -0.8939],
          [ 2.6072, -0.8492]],

         [[ 2.6884, -1.0220],
          [ 2.5862, -0.8438],
          [ 2.6498, -0.8786],
          ...,
          [ 2.6749, -0.8939],
          [ 0.0000, -0.0000],
          [ 2.6607, -1.0672]],

         [[ 2.6642, -1.0273],
          [ 2.5621, -0.8469],
          [ 2.5943, -0.8491],
          ...,
          [ 2.6072, -0.8492],
          [ 2.6607, -1.0672],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6348, -0.8763],
          [ 2.6669, -0.8687],
          ...,
          [ 2.5993, -0.8729],
          [ 2.6722, -1.1052],
          [ 2.6744, -1.1023]],

         [[ 2.6348, -0.8763],
          [ 0.0000, -0.0000],
          [ 2.7719, -0.9772],
          ...,
          [ 2.6246, -0.8708],
          [ 2.6896, -1.0793],
          [ 2.6813, -0.9074]],

         [[ 2.6669, -0.8687],
          [ 2.7719, -0.9772],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6499, -0.8562],
          [ 2.6990, -0.8985],
          [ 2.6668, -1.0085]],

         ...,

         [[ 2.5993, -0.8729],
          [ 2.6246, -0.8708],
          [ 2.6499, -0.8562],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6079, -0.8740],
          [ 2.6709, -1.1034]],

         [[ 2.6722, -1.1052],
          [ 2.6896, -1.0793],
          [ 2.6990, -0.8985],
          ...,
          [ 2.6079, -0.8740],
          [ 0.0000, -0.0000],
          [ 2.6845, -1.1031]],

         [[ 2.6744, -1.1023],
          [ 2.6813, -0.9074],
          [ 2.6668, -1.0085],
          ...,
          [ 2.6709, -1.1034],
          [ 2.6845, -1.1031],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6440, -0.8786],
          [ 2.6508, -1.0824],
          ...,
          [ 2.6591, -1.0857],
          [ 2.6625, -0.8883],
          [ 2.6842, -1.0869]],

         [[ 2.6440, -0.8786],
          [ 0.0000, -0.0000],
          [ 2.6044, -0.8594],
          ...,
          [ 2.6188, -0.8661],
          [ 2.6866, -1.0889],
          [ 2.6878, -1.0857]],

         [[ 2.6508, -1.0824],
          [ 2.6044, -0.8594],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6392, -1.0813],
          [ 2.6569, -1.0773],
          [ 2.6593, -1.0753]],

         ...,

         [[ 2.6591, -1.0857],
          [ 2.6188, -0.8661],
          [ 2.6392, -1.0813],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6667, -1.0822],
          [ 2.6690, -1.0803]],

         [[ 2.6625, -0.8883],
          [ 2.6866, -1.0889],
          [ 2.6569, -1.0773],
          ...,
          [ 2.6667, -1.0822],
          [ 0.0000, -0.0000],
          [ 2.6891, -0.9034]],

         [[ 2.6842, -1.0869],
          [ 2.6878, -1.0857],
          [ 2.6593, -1.0753],
          ...,
          [ 2.6690, -1.0803],
          [ 2.6891, -0.9034],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6555, -1.0491],
          [ 2.6444, -0.8718],
          ...,
          [ 2.6713, -1.0135],
          [ 2.7216, -0.9268],
          [ 2.6885, -1.0523]],

         [[ 2.6555, -1.0491],
          [ 0.0000, -0.0000],
          [ 2.5793, -0.8506],
          ...,
          [ 2.6498, -1.0076],
          [ 2.6530, -1.0574],
          [ 2.6250, -0.8610]],

         [[ 2.6444, -0.8718],
          [ 2.5793, -0.8506],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6561, -1.0071],
          [ 2.6615, -1.0601],
          [ 2.6396, -0.8704]],

         ...,

         [[ 2.6713, -1.0135],
          [ 2.6498, -1.0076],
          [ 2.6561, -1.0071],
          ...,
          [ 0.0000, -0.0000],
          [ 2.7282, -0.9297],
          [ 2.7359, -0.9382]],

         [[ 2.7216, -0.9268],
          [ 2.6530, -1.0574],
          [ 2.6615, -1.0601],
          ...,
          [ 2.7282, -0.9297],
          [ 0.0000, -0.0000],
          [ 2.6876, -1.0592]],

         [[ 2.6885, -1.0523],
          [ 2.6250, -0.8610],
          [ 2.6396, -0.8704],
          ...,
          [ 2.7359, -0.9382],
          [ 2.6876, -1.0592],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6535, -0.8830],
          [ 2.6750, -1.0900],
          ...,
          [ 2.6209, -0.8648],
          [ 2.6441, -0.8758],
          [ 2.6898, -0.9030]],

         [[ 2.6535, -0.8830],
          [ 0.0000, -0.0000],
          [ 2.6221, -0.8679],
          ...,
          [ 2.6594, -1.0846],
          [ 2.6756, -1.0843],
          [ 2.6635, -0.8854]],

         [[ 2.6750, -1.0900],
          [ 2.6221, -0.8679],
          [ 0.0000, -0.0000],
          ...,
          [ 2.5989, -0.8599],
          [ 2.6650, -1.0841],
          [ 2.6769, -1.0816]],

         ...,

         [[ 2.6209, -0.8648],
          [ 2.6594, -1.0846],
          [ 2.5989, -0.8599],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6599, -1.0820],
          [ 2.6681, -1.0753]],

         [[ 2.6441, -0.8758],
          [ 2.6756, -1.0843],
          [ 2.6650, -1.0841],
          ...,
          [ 2.6599, -1.0820],
          [ 0.0000, -0.0000],
          [ 2.6536, -0.8780]],

         [[ 2.6898, -0.9030],
          [ 2.6635, -0.8854],
          [ 2.6769, -1.0816],
          ...,
          [ 2.6681, -1.0753],
          [ 2.6536, -0.8780],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6391, -0.8752],
          [ 2.6518, -0.8806],
          ...,
          [ 2.6427, -0.8778],
          [ 2.6706, -1.0821],
          [ 2.6306, -0.8711]],

         [[ 2.6391, -0.8752],
          [ 0.0000, -0.0000],
          [ 2.6801, -1.0782],
          ...,
          [ 2.6482, -0.8805],
          [ 2.6417, -0.8770],
          [ 2.6704, -1.0809]],

         [[ 2.6518, -0.8806],
          [ 2.6801, -1.0782],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6618, -0.8868],
          [ 2.6784, -1.0794],
          [ 2.6754, -1.0770]],

         ...,

         [[ 2.6427, -0.8778],
          [ 2.6482, -0.8805],
          [ 2.6618, -0.8868],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6454, -0.8797],
          [ 2.6391, -0.8757]],

         [[ 2.6706, -1.0821],
          [ 2.6417, -0.8770],
          [ 2.6784, -1.0794],
          ...,
          [ 2.6454, -0.8797],
          [ 0.0000, -0.0000],
          [ 2.6330, -0.8728]],

         [[ 2.6306, -0.8711],
          [ 2.6704, -1.0809],
          [ 2.6754, -1.0770],
          ...,
          [ 2.6391, -0.8757],
          [ 2.6330, -0.8728],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6477, -0.9739],
          [ 2.6911, -0.9054],
          ...,
          [ 2.6830, -1.0644],
          [ 2.6522, -0.8851],
          [ 2.6735, -1.0224]],

         [[ 2.6477, -0.9739],
          [ 0.0000, -0.0000],
          [ 2.7900, -0.9988],
          ...,
          [ 2.6494, -0.9899],
          [ 2.7150, -0.9067],
          [ 2.8147, -1.0342]],

         [[ 2.6911, -0.9054],
          [ 2.7900, -0.9988],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6837, -1.0423],
          [ 2.6857, -0.9008],
          [ 2.7494, -0.9568]],

         ...,

         [[ 2.6830, -1.0644],
          [ 2.6494, -0.9899],
          [ 2.6837, -1.0423],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6793, -1.0697],
          [ 2.7333, -0.9386]],

         [[ 2.6522, -0.8851],
          [ 2.7150, -0.9067],
          [ 2.6857, -0.9008],
          ...,
          [ 2.6793, -1.0697],
          [ 0.0000, -0.0000],
          [ 2.6712, -1.0341]],

         [[ 2.6735, -1.0224],
          [ 2.8147, -1.0342],
          [ 2.7494, -0.9568],
          ...,
          [ 2.7333, -0.9386],
          [ 2.6712, -1.0341],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6826, -0.8876],
          [ 2.7168, -0.9095],
          ...,
          [ 2.6610, -1.0409],
          [ 2.6695, -0.8809],
          [ 2.6887, -1.0148]],

         [[ 2.6826, -0.8876],
          [ 0.0000, -0.0000],
          [ 2.6946, -1.0230],
          ...,
          [ 2.6680, -1.0299],
          [ 2.6861, -0.8896],
          [ 2.6807, -0.9885]],

         [[ 2.7168, -0.9095],
          [ 2.6946, -1.0230],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6690, -1.0297],
          [ 2.7221, -0.9137],
          [ 2.7484, -0.9393]],

         ...,

         [[ 2.6610, -1.0409],
          [ 2.6680, -1.0299],
          [ 2.6690, -1.0297],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6567, -1.0432],
          [ 2.6406, -0.8560]],

         [[ 2.6695, -0.8809],
          [ 2.6861, -0.8896],
          [ 2.7221, -0.9137],
          ...,
          [ 2.6567, -1.0432],
          [ 0.0000, -0.0000],
          [ 2.6841, -1.0300]],

         [[ 2.6887, -1.0148],
          [ 2.6807, -0.9885],
          [ 2.7484, -0.9393],
          ...,
          [ 2.6406, -0.8560],
          [ 2.6841, -1.0300],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6573, -0.8810],
          [ 2.6996, -1.0542],
          ...,
          [ 2.6567, -0.8811],
          [ 2.6710, -0.8929],
          [ 2.5923, -0.8422]],

         [[ 2.6573, -0.8810],
          [ 0.0000, -0.0000],
          [ 2.6858, -1.0801],
          ...,
          [ 2.6424, -0.8767],
          [ 2.6519, -0.8802],
          [ 2.6469, -1.0697]],

         [[ 2.6996, -1.0542],
          [ 2.6858, -1.0801],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6870, -1.0788],
          [ 2.6972, -1.0681],
          [ 2.5920, -0.8478]],

         ...,

         [[ 2.6567, -0.8811],
          [ 2.6424, -0.8767],
          [ 2.6870, -1.0788],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6511, -0.8802],
          [ 2.6495, -1.0707]],

         [[ 2.6710, -0.8929],
          [ 2.6519, -0.8802],
          [ 2.6972, -1.0681],
          ...,
          [ 2.6511, -0.8802],
          [ 0.0000, -0.0000],
          [ 2.5910, -0.8468]],

         [[ 2.5923, -0.8422],
          [ 2.6469, -1.0697],
          [ 2.5920, -0.8478],
          ...,
          [ 2.6495, -1.0707],
          [ 2.5910, -0.8468],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6678, -1.0428],
          [ 2.6534, -1.0455],
          ...,
          [ 2.7064, -0.9100],
          [ 2.6701, -0.8882],
          [ 2.7219, -0.9112]],

         [[ 2.6678, -1.0428],
          [ 0.0000, -0.0000],
          [ 2.6534, -1.0437],
          ...,
          [ 2.6728, -0.8833],
          [ 2.6411, -0.8682],
          [ 2.6497, -0.9490]],

         [[ 2.6534, -1.0455],
          [ 2.6534, -1.0437],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6648, -1.0404],
          [ 2.6577, -1.0474],
          [ 2.6478, -0.9744]],

         ...,

         [[ 2.7064, -0.9100],
          [ 2.6728, -0.8833],
          [ 2.6648, -1.0404],
          ...,
          [ 0.0000, -0.0000],
          [ 2.7182, -0.9195],
          [ 2.7949, -0.9840]],

         [[ 2.6701, -0.8882],
          [ 2.6411, -0.8682],
          [ 2.6577, -1.0474],
          ...,
          [ 2.7182, -0.9195],
          [ 0.0000, -0.0000],
          [ 2.6608, -0.9865]],

         [[ 2.7219, -0.9112],
          [ 2.6497, -0.9490],
          [ 2.6478, -0.9744],
          ...,
          [ 2.7949, -0.9840],
          [ 2.6608, -0.9865],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6870, -0.8973],
          [ 2.6468, -1.0394],
          ...,
          [ 2.6699, -0.8866],
          [ 2.6629, -0.8818],
          [ 2.6715, -0.8857]],

         [[ 2.6870, -0.8973],
          [ 0.0000, -0.0000],
          [ 2.6057, -0.8478],
          ...,
          [ 2.6693, -1.0482],
          [ 2.6412, -0.8688],
          [ 2.6766, -1.0338]],

         [[ 2.6468, -1.0394],
          [ 2.6057, -0.8478],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6387, -1.0431],
          [ 2.5909, -0.8450],
          [ 2.5948, -0.8408]],

         ...,

         [[ 2.6699, -0.8866],
          [ 2.6693, -1.0482],
          [ 2.6387, -1.0431],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6279, -0.8632],
          [ 2.6703, -1.0423]],

         [[ 2.6629, -0.8818],
          [ 2.6412, -0.8688],
          [ 2.5909, -0.8450],
          ...,
          [ 2.6279, -0.8632],
          [ 0.0000, -0.0000],
          [ 2.6648, -1.0468]],

         [[ 2.6715, -0.8857],
          [ 2.6766, -1.0338],
          [ 2.5948, -0.8408],
          ...,
          [ 2.6703, -1.0423],
          [ 2.6648, -1.0468],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6202, -0.8602],
          [ 2.6592, -1.0713],
          ...,
          [ 2.6107, -0.8608],
          [ 2.6265, -1.0719],
          [ 2.6523, -1.0764]],

         [[ 2.6202, -0.8602],
          [ 0.0000, -0.0000],
          [ 2.6941, -0.9058],
          ...,
          [ 2.6656, -0.8881],
          [ 2.6462, -1.0621],
          [ 2.6615, -0.8857]],

         [[ 2.6592, -1.0713],
          [ 2.6941, -0.9058],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6754, -0.8953],
          [ 2.6456, -1.0661],
          [ 2.6712, -0.8928]],

         ...,

         [[ 2.6107, -0.8608],
          [ 2.6656, -0.8881],
          [ 2.6754, -0.8953],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6421, -1.0721],
          [ 2.6468, -0.8804]],

         [[ 2.6265, -1.0719],
          [ 2.6462, -1.0621],
          [ 2.6456, -1.0661],
          ...,
          [ 2.6421, -1.0721],
          [ 0.0000, -0.0000],
          [ 2.6407, -1.0738]],

         [[ 2.6523, -1.0764],
          [ 2.6615, -0.8857],
          [ 2.6712, -0.8928],
          ...,
          [ 2.6468, -0.8804],
          [ 2.6407, -1.0738],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6457, -0.8580],
          [ 2.6937, -0.8965],
          ...,
          [ 2.6732, -1.0351],
          [ 2.7387, -0.9406],
          [ 2.6553, -1.0258]],

         [[ 2.6457, -0.8580],
          [ 0.0000, -0.0000],
          [ 2.6060, -0.8633],
          ...,
          [ 2.6021, -0.8631],
          [ 2.6179, -0.8591],
          [ 2.5797, -0.8567]],

         [[ 2.6937, -0.8965],
          [ 2.6060, -0.8633],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6292, -0.8746],
          [ 2.6808, -1.0712],
          [ 2.6486, -1.0786]],

         ...,

         [[ 2.6732, -1.0351],
          [ 2.6021, -0.8631],
          [ 2.6292, -0.8746],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6775, -1.0736],
          [ 2.5950, -0.8607]],

         [[ 2.7387, -0.9406],
          [ 2.6179, -0.8591],
          [ 2.6808, -1.0712],
          ...,
          [ 2.6775, -1.0736],
          [ 0.0000, -0.0000],
          [ 2.6073, -0.8535]],

         [[ 2.6553, -1.0258],
          [ 2.5797, -0.8567],
          [ 2.6486, -1.0786],
          ...,
          [ 2.5950, -0.8607],
          [ 2.6073, -0.8535],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6702, -1.0626],
          [ 2.6833, -1.0464],
          ...,
          [ 2.6379, -0.8685],
          [ 2.6745, -1.0624],
          [ 2.6965, -0.9066]],

         [[ 2.6702, -1.0626],
          [ 0.0000, -0.0000],
          [ 2.6746, -1.0456],
          ...,
          [ 2.6645, -1.0598],
          [ 2.6642, -1.0629],
          [ 2.6637, -0.8844]],

         [[ 2.6833, -1.0464],
          [ 2.6746, -1.0456],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6424, -0.8684],
          [ 2.6695, -0.8861],
          [ 2.6873, -1.0447]],

         ...,

         [[ 2.6379, -0.8685],
          [ 2.6645, -1.0598],
          [ 2.6424, -0.8684],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6236, -0.8612],
          [ 2.6746, -1.0527]],

         [[ 2.6745, -1.0624],
          [ 2.6642, -1.0629],
          [ 2.6695, -0.8861],
          ...,
          [ 2.6236, -0.8612],
          [ 0.0000, -0.0000],
          [ 2.6770, -0.8929]],

         [[ 2.6965, -0.9066],
          [ 2.6637, -0.8844],
          [ 2.6873, -1.0447],
          ...,
          [ 2.6746, -1.0527],
          [ 2.6770, -0.8929],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6646, -0.8889],
          [ 2.6802, -1.0852],
          ...,
          [ 2.6461, -0.8790],
          [ 2.6209, -0.8650],
          [ 2.6455, -1.0720]],

         [[ 2.6646, -0.8889],
          [ 0.0000, -0.0000],
          [ 2.6523, -0.8805],
          ...,
          [ 2.6790, -1.0836],
          [ 2.6217, -0.8638],
          [ 2.6470, -1.0689]],

         [[ 2.6802, -1.0852],
          [ 2.6523, -0.8805],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6353, -0.8721],
          [ 2.6613, -1.0770],
          [ 2.6438, -1.0706]],

         ...,

         [[ 2.6461, -0.8790],
          [ 2.6790, -1.0836],
          [ 2.6353, -0.8721],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6572, -1.0781],
          [ 2.5864, -0.8508]],

         [[ 2.6209, -0.8650],
          [ 2.6217, -0.8638],
          [ 2.6613, -1.0770],
          ...,
          [ 2.6572, -1.0781],
          [ 0.0000, -0.0000],
          [ 2.5743, -0.8495]],

         [[ 2.6455, -1.0720],
          [ 2.6470, -1.0689],
          [ 2.6438, -1.0706],
          ...,
          [ 2.5864, -0.8508],
          [ 2.5743, -0.8495],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6219, -0.8645],
          [ 2.6814, -1.0639],
          ...,
          [ 2.6873, -1.0643],
          [ 2.7316, -0.9233],
          [ 2.6641, -0.8882]],

         [[ 2.6219, -0.8645],
          [ 0.0000, -0.0000],
          [ 2.6596, -1.0648],
          ...,
          [ 2.6647, -1.0630],
          [ 2.6543, -0.8554],
          [ 2.6559, -1.0667]],

         [[ 2.6814, -1.0639],
          [ 2.6596, -1.0648],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6933, -0.9056],
          [ 2.7299, -0.9208],
          [ 2.6778, -1.0666]],

         ...,

         [[ 2.6873, -1.0643],
          [ 2.6647, -1.0630],
          [ 2.6933, -0.9056],
          ...,
          [ 0.0000, -0.0000],
          [ 2.7705, -0.9614],
          [ 2.6899, -0.9035]],

         [[ 2.7316, -0.9233],
          [ 2.6543, -0.8554],
          [ 2.7299, -0.9208],
          ...,
          [ 2.7705, -0.9614],
          [ 0.0000, -0.0000],
          [ 2.6600, -0.9923]],

         [[ 2.6641, -0.8882],
          [ 2.6559, -1.0667],
          [ 2.6778, -1.0666],
          ...,
          [ 2.6899, -0.9035],
          [ 2.6600, -0.9923],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.7067, -0.9095],
          [ 2.6943, -1.0839],
          ...,
          [ 2.6857, -1.0812],
          [ 2.6217, -0.8633],
          [ 2.6165, -0.8596]],

         [[ 2.7067, -0.9095],
          [ 0.0000, -0.0000],
          [ 2.7011, -1.0575],
          ...,
          [ 2.6936, -1.0595],
          [ 2.6313, -0.8557],
          [ 2.6256, -0.8515]],

         [[ 2.6943, -1.0839],
          [ 2.7011, -1.0575],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6393, -0.8743],
          [ 2.6687, -1.0819],
          [ 2.6077, -0.8591]],

         ...,

         [[ 2.6857, -1.0812],
          [ 2.6936, -1.0595],
          [ 2.6393, -0.8743],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6065, -0.8611],
          [ 2.6581, -1.0761]],

         [[ 2.6217, -0.8633],
          [ 2.6313, -0.8557],
          [ 2.6687, -1.0819],
          ...,
          [ 2.6065, -0.8611],
          [ 0.0000, -0.0000],
          [ 2.5857, -0.8553]],

         [[ 2.6165, -0.8596],
          [ 2.6256, -0.8515],
          [ 2.6077, -0.8591],
          ...,
          [ 2.6581, -1.0761],
          [ 2.5857, -0.8553],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6690, -1.0816],
          [ 2.6602, -1.0805],
          ...,
          [ 2.6683, -1.0807],
          [ 2.6718, -1.0827],
          [ 2.6492, -1.0772]],

         [[ 2.6690, -1.0816],
          [ 0.0000, -0.0000],
          [ 2.6245, -0.8678],
          ...,
          [ 2.6451, -0.8780],
          [ 2.6542, -0.8832],
          [ 2.6507, -1.0730]],

         [[ 2.6602, -1.0805],
          [ 2.6245, -0.8678],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6627, -1.0767],
          [ 2.6312, -0.8707],
          [ 2.6445, -1.0749]],

         ...,

         [[ 2.6683, -1.0807],
          [ 2.6451, -0.8780],
          [ 2.6627, -1.0767],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6532, -0.8825],
          [ 2.6504, -1.0722]],

         [[ 2.6718, -1.0827],
          [ 2.6542, -0.8832],
          [ 2.6312, -0.8707],
          ...,
          [ 2.6532, -0.8825],
          [ 0.0000, -0.0000],
          [ 2.6520, -1.0725]],

         [[ 2.6492, -1.0772],
          [ 2.6507, -1.0730],
          [ 2.6445, -1.0749],
          ...,
          [ 2.6504, -1.0722],
          [ 2.6520, -1.0725],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.7916, -0.9886],
          [ 2.7481, -0.9519],
          ...,
          [ 2.6591, -0.9990],
          [ 2.7324, -0.9307],
          [ 2.6725, -0.8748]],

         [[ 2.7916, -0.9886],
          [ 0.0000, -0.0000],
          [ 2.7548, -0.9507],
          ...,
          [ 2.7412, -0.9367],
          [ 2.7416, -0.9363],
          [ 2.6666, -1.0140]],

         [[ 2.7481, -0.9519],
          [ 2.7548, -0.9507],
          [ 0.0000, -0.0000],
          ...,
          [ 2.7048, -0.9083],
          [ 2.6699, -0.9929],
          [ 2.6579, -0.8729]],

         ...,

         [[ 2.6591, -0.9990],
          [ 2.7412, -0.9367],
          [ 2.7048, -0.9083],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6755, -1.0310],
          [ 2.6601, -1.0375]],

         [[ 2.7324, -0.9307],
          [ 2.7416, -0.9363],
          [ 2.6699, -0.9929],
          ...,
          [ 2.6755, -1.0310],
          [ 0.0000, -0.0000],
          [ 2.6618, -1.0215]],

         [[ 2.6725, -0.8748],
          [ 2.6666, -1.0140],
          [ 2.6579, -0.8729],
          ...,
          [ 2.6601, -1.0375],
          [ 2.6618, -1.0215],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6005, -0.8131],
          [ 2.6439, -0.8376],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.6005, -0.8131],
          [ 0.0000, -0.0000],
          [ 2.6535, -1.0577],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.6439, -0.8376],
          [ 2.6535, -1.0577],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         ...,

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6543, -0.8767],
          [ 2.6251, -1.0417],
          ...,
          [ 2.6848, -1.0497],
          [ 2.6195, -0.8588],
          [ 2.6629, -1.0598]],

         [[ 2.6543, -0.8767],
          [ 0.0000, -0.0000],
          [ 2.6301, -1.0435],
          ...,
          [ 2.6883, -1.0563],
          [ 2.6674, -1.0627],
          [ 2.6486, -0.8748]],

         [[ 2.6251, -1.0417],
          [ 2.6301, -1.0435],
          [ 0.0000, -0.0000],
          ...,
          [ 2.5855, -0.8309],
          [ 2.6240, -1.0489],
          [ 2.5756, -0.8399]],

         ...,

         [[ 2.6848, -1.0497],
          [ 2.6883, -1.0563],
          [ 2.5855, -0.8309],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6372, -0.8643],
          [ 2.6782, -1.0568]],

         [[ 2.6195, -0.8588],
          [ 2.6674, -1.0627],
          [ 2.6240, -1.0489],
          ...,
          [ 2.6372, -0.8643],
          [ 0.0000, -0.0000],
          [ 2.6578, -1.0629]],

         [[ 2.6629, -1.0598],
          [ 2.6486, -0.8748],
          [ 2.5756, -0.8399],
          ...,
          [ 2.6782, -1.0568],
          [ 2.6578, -1.0629],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6226, -0.9800],
          [ 2.8103, -1.0225],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.6226, -0.9800],
          [ 0.0000, -0.0000],
          [ 2.5727, -0.7659],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.8103, -1.0225],
          [ 2.5727, -0.7659],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         ...,

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.3687, -0.7037],
          [ 2.4586, -0.9176],
          ...,
          [ 2.4438, -0.8115],
          [ 2.4325, -0.8661],
          [ 2.4578, -0.9084]],

         [[ 2.3687, -0.7037],
          [ 0.0000, -0.0000],
          [ 2.6747, -0.8814],
          ...,
          [ 2.6850, -1.0062],
          [ 2.7013, -1.0481],
          [ 2.6848, -1.0474]],

         [[ 2.4586, -0.9176],
          [ 2.6747, -0.8814],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6653, -0.9848],
          [ 2.6737, -0.8798],
          [ 2.6403, -0.8647]],

         ...,

         [[ 2.4438, -0.8115],
          [ 2.6850, -1.0062],
          [ 2.6653, -0.9848],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6911, -1.0053],
          [ 2.7223, -0.9020]],

         [[ 2.4325, -0.8661],
          [ 2.7013, -1.0481],
          [ 2.6737, -0.8798],
          ...,
          [ 2.6911, -1.0053],
          [ 0.0000, -0.0000],
          [ 2.6880, -1.0465]],

         [[ 2.4578, -0.9084],
          [ 2.6848, -1.0474],
          [ 2.6403, -0.8647],
          ...,
          [ 2.7223, -0.9020],
          [ 2.6880, -1.0465],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6824, -1.0503],
          [ 2.6551, -0.8772],
          ...,
          [ 2.6789, -1.0482],
          [ 2.6633, -1.0532],
          [ 2.6835, -1.0498]],

         [[ 2.6824, -1.0503],
          [ 0.0000, -0.0000],
          [ 2.6686, -0.8870],
          ...,
          [ 2.6769, -1.0598],
          [ 2.6583, -1.0569],
          [ 2.6833, -1.0621]],

         [[ 2.6551, -0.8772],
          [ 2.6686, -0.8870],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6717, -1.0597],
          [ 2.6546, -1.0575],
          [ 2.6719, -0.8894]],

         ...,

         [[ 2.6789, -1.0482],
          [ 2.6769, -1.0598],
          [ 2.6717, -1.0597],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6548, -1.0554],
          [ 2.6782, -1.0594]],

         [[ 2.6633, -1.0532],
          [ 2.6583, -1.0569],
          [ 2.6546, -1.0575],
          ...,
          [ 2.6548, -1.0554],
          [ 0.0000, -0.0000],
          [ 2.6348, -0.8662]],

         [[ 2.6835, -1.0498],
          [ 2.6833, -1.0621],
          [ 2.6719, -0.8894],
          ...,
          [ 2.6782, -1.0594],
          [ 2.6348, -0.8662],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6831, -1.0553],
          [ 2.8184, -0.9966],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.6831, -1.0553],
          [ 0.0000, -0.0000],
          [ 2.7101, -0.8772],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.8184, -0.9966],
          [ 2.7101, -0.8772],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         ...,

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6704, -0.8969],
          [ 2.6784, -1.0824],
          ...,
          [ 2.6873, -1.0760],
          [ 2.6473, -0.8826],
          [ 2.6708, -0.8962]],

         [[ 2.6704, -0.8969],
          [ 0.0000, -0.0000],
          [ 2.6774, -1.0906],
          ...,
          [ 2.6853, -1.0889],
          [ 2.6575, -0.8918],
          [ 2.6908, -1.0903]],

         [[ 2.6784, -1.0824],
          [ 2.6774, -1.0906],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6700, -1.0887],
          [ 2.6702, -1.0957],
          [ 2.6440, -0.8831]],

         ...,

         [[ 2.6873, -1.0760],
          [ 2.6853, -1.0889],
          [ 2.6700, -1.0887],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6779, -1.0947],
          [ 2.6605, -0.8919]],

         [[ 2.6473, -0.8826],
          [ 2.6575, -0.8918],
          [ 2.6702, -1.0957],
          ...,
          [ 2.6779, -1.0947],
          [ 0.0000, -0.0000],
          [ 2.6586, -0.8927]],

         [[ 2.6708, -0.8962],
          [ 2.6908, -1.0903],
          [ 2.6440, -0.8831],
          ...,
          [ 2.6605, -0.8919],
          [ 2.6586, -0.8927],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6655, -0.9959],
          [ 2.6978, -0.8901],
          ...,
          [ 2.7642, -0.9561],
          [ 2.6671, -0.9994],
          [ 2.6692, -1.0056]],

         [[ 2.6655, -0.9959],
          [ 0.0000, -0.0000],
          [ 2.6347, -0.8763],
          ...,
          [ 2.6877, -1.0834],
          [ 2.6709, -0.8949],
          [ 2.6792, -0.8999]],

         [[ 2.6978, -0.8901],
          [ 2.6347, -0.8763],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6482, -0.8811],
          [ 2.6819, -1.0811],
          [ 2.6837, -1.0796]],

         ...,

         [[ 2.7642, -0.9561],
          [ 2.6877, -1.0834],
          [ 2.6482, -0.8811],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6902, -0.9069],
          [ 2.6965, -1.0738]],

         [[ 2.6671, -0.9994],
          [ 2.6709, -0.8949],
          [ 2.6819, -1.0811],
          ...,
          [ 2.6902, -0.9069],
          [ 0.0000, -0.0000],
          [ 2.7021, -0.9144]],

         [[ 2.6692, -1.0056],
          [ 2.6792, -0.8999],
          [ 2.6837, -1.0796],
          ...,
          [ 2.6965, -1.0738],
          [ 2.7021, -0.9144],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6929, -0.8826],
          [ 2.6793, -0.8867],
          ...,
          [ 2.6396, -0.9552],
          [ 2.6474, -1.0569],
          [ 2.6651, -0.8827]],

         [[ 2.6929, -0.8826],
          [ 0.0000, -0.0000],
          [ 2.6621, -0.9967],
          ...,
          [ 2.8627, -1.1084],
          [ 2.6388, -0.9647],
          [ 2.6613, -0.9948]],

         [[ 2.6793, -0.8867],
          [ 2.6621, -0.9967],
          [ 0.0000, -0.0000],
          ...,
          [ 2.8068, -1.0028],
          [ 2.6495, -0.8644],
          [ 2.7412, -0.9362]],

         ...,

         [[ 2.6396, -0.9552],
          [ 2.8627, -1.1084],
          [ 2.8068, -1.0028],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6297, -0.9485],
          [ 2.7731, -0.9618]],

         [[ 2.6474, -1.0569],
          [ 2.6388, -0.9647],
          [ 2.6495, -0.8644],
          ...,
          [ 2.6297, -0.9485],
          [ 0.0000, -0.0000],
          [ 2.6380, -0.8643]],

         [[ 2.6651, -0.8827],
          [ 2.6613, -0.9948],
          [ 2.7412, -0.9362],
          ...,
          [ 2.7731, -0.9618],
          [ 2.6380, -0.8643],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6312, -1.0596],
          [ 2.5546, -0.8450],
          ...,
          [ 2.6427, -1.0131],
          [ 2.6394, -1.0458],
          [ 2.5857, -0.8406]],

         [[ 2.6312, -1.0596],
          [ 0.0000, -0.0000],
          [ 2.5911, -0.8508],
          ...,
          [ 2.6841, -0.8885],
          [ 2.6841, -1.0671],
          [ 2.6771, -1.0701]],

         [[ 2.5546, -0.8450],
          [ 2.5911, -0.8508],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6517, -1.0219],
          [ 2.6160, -0.8528],
          [ 2.6466, -1.0593]],

         ...,

         [[ 2.6427, -1.0131],
          [ 2.6841, -0.8885],
          [ 2.6517, -1.0219],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6920, -1.0328],
          [ 2.7180, -0.9161]],

         [[ 2.6394, -1.0458],
          [ 2.6841, -1.0671],
          [ 2.6160, -0.8528],
          ...,
          [ 2.6920, -1.0328],
          [ 0.0000, -0.0000],
          [ 2.7050, -0.9108]],

         [[ 2.5857, -0.8406],
          [ 2.6771, -1.0701],
          [ 2.6466, -1.0593],
          ...,
          [ 2.7180, -0.9161],
          [ 2.7050, -0.9108],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6656, -1.0898],
          [ 2.6995, -0.9042],
          ...,
          [ 2.6722, -1.0908],
          [ 2.6651, -1.0899],
          [ 2.6792, -1.0846]],

         [[ 2.6656, -1.0898],
          [ 0.0000, -0.0000],
          [ 2.6599, -1.0217],
          ...,
          [ 2.6590, -1.0938],
          [ 2.6538, -1.0942],
          [ 2.6015, -0.8640]],

         [[ 2.6995, -0.9042],
          [ 2.6599, -1.0217],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6664, -1.0169],
          [ 2.6597, -1.0237],
          [ 2.6708, -0.8834]],

         ...,

         [[ 2.6722, -1.0908],
          [ 2.6590, -1.0938],
          [ 2.6664, -1.0169],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6062, -0.8700],
          [ 2.6699, -1.0897]],

         [[ 2.6651, -1.0899],
          [ 2.6538, -1.0942],
          [ 2.6597, -1.0237],
          ...,
          [ 2.6062, -0.8700],
          [ 0.0000, -0.0000],
          [ 2.6608, -1.0891]],

         [[ 2.6792, -1.0846],
          [ 2.6015, -0.8640],
          [ 2.6708, -0.8834],
          ...,
          [ 2.6699, -1.0897],
          [ 2.6608, -1.0891],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6642, -0.8844],
          [ 2.6695, -1.0603],
          ...,
          [ 2.6623, -0.8830],
          [ 2.6685, -0.8860],
          [ 2.6360, -0.8670]],

         [[ 2.6642, -0.8844],
          [ 0.0000, -0.0000],
          [ 2.6787, -1.0524],
          ...,
          [ 2.6916, -0.9010],
          [ 2.6857, -1.0590],
          [ 2.6611, -0.8804]],

         [[ 2.6695, -1.0603],
          [ 2.6787, -1.0524],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6805, -1.0476],
          [ 2.6585, -0.8784],
          [ 2.6810, -1.0426]],

         ...,

         [[ 2.6623, -0.8830],
          [ 2.6916, -0.9010],
          [ 2.6805, -1.0476],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6967, -0.9037],
          [ 2.6597, -0.8794]],

         [[ 2.6685, -0.8860],
          [ 2.6857, -1.0590],
          [ 2.6585, -0.8784],
          ...,
          [ 2.6967, -0.9037],
          [ 0.0000, -0.0000],
          [ 2.6794, -1.0519]],

         [[ 2.6360, -0.8670],
          [ 2.6611, -0.8804],
          [ 2.6810, -1.0426],
          ...,
          [ 2.6597, -0.8794],
          [ 2.6794, -1.0519],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.5798, -0.8620],
          [ 2.6792, -1.0962],
          ...,
          [ 2.6727, -1.0998],
          [ 2.5869, -0.8643],
          [ 2.6726, -1.1017]],

         [[ 2.5798, -0.8620],
          [ 0.0000, -0.0000],
          [ 2.6518, -1.0823],
          ...,
          [ 2.6480, -1.0897],
          [ 2.5670, -0.8620],
          [ 2.6488, -1.0926]],

         [[ 2.6792, -1.0962],
          [ 2.6518, -1.0823],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6912, -1.0983],
          [ 2.6085, -0.8624],
          [ 2.6702, -0.8986]],

         ...,

         [[ 2.6727, -1.0998],
          [ 2.6480, -1.0897],
          [ 2.6912, -1.0983],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6577, -1.0928],
          [ 2.6558, -0.8926]],

         [[ 2.5869, -0.8643],
          [ 2.5670, -0.8620],
          [ 2.6085, -0.8624],
          ...,
          [ 2.6577, -1.0928],
          [ 0.0000, -0.0000],
          [ 2.6579, -1.0953]],

         [[ 2.6726, -1.1017],
          [ 2.6488, -1.0926],
          [ 2.6702, -0.8986],
          ...,
          [ 2.6558, -0.8926],
          [ 2.6579, -1.0953],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.7252, -0.9345],
          [ 2.6611, -0.8871],
          ...,
          [ 2.6827, -1.0676],
          [ 2.7844, -0.9877],
          [ 2.7158, -0.9290]],

         [[ 2.7252, -0.9345],
          [ 0.0000, -0.0000],
          [ 2.6692, -0.8924],
          ...,
          [ 2.6843, -1.0777],
          [ 2.6693, -1.0033],
          [ 2.6952, -1.0446]],

         [[ 2.6611, -0.8871],
          [ 2.6692, -0.8924],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6197, -0.8750],
          [ 2.6968, -0.8946],
          [ 2.6602, -0.8871]],

         ...,

         [[ 2.6827, -1.0676],
          [ 2.6843, -1.0777],
          [ 2.6197, -0.8750],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6779, -0.8778],
          [ 2.6830, -1.0720]],

         [[ 2.7844, -0.9877],
          [ 2.6693, -1.0033],
          [ 2.6968, -0.8946],
          ...,
          [ 2.6779, -0.8778],
          [ 0.0000, -0.0000],
          [ 2.7794, -0.9809]],

         [[ 2.7158, -0.9290],
          [ 2.6952, -1.0446],
          [ 2.6602, -0.8871],
          ...,
          [ 2.6830, -1.0720],
          [ 2.7794, -0.9809],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6800, -1.0716],
          [ 2.5957, -0.8531],
          ...,
          [ 2.6797, -1.0576],
          [ 2.6205, -1.0493],
          [ 2.6728, -0.8989]],

         [[ 2.6800, -1.0716],
          [ 0.0000, -0.0000],
          [ 2.6049, -0.8595],
          ...,
          [ 2.6788, -1.0713],
          [ 2.6185, -1.0536],
          [ 2.6822, -1.0733]],

         [[ 2.5957, -0.8531],
          [ 2.6049, -0.8595],
          [ 0.0000, -0.0000],
          ...,
          [ 2.5924, -0.8520],
          [ 2.6026, -1.0653],
          [ 2.6476, -1.0628]],

         ...,

         [[ 2.6797, -1.0576],
          [ 2.6788, -1.0713],
          [ 2.5924, -0.8520],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6191, -1.0497],
          [ 2.6672, -0.8944]],

         [[ 2.6205, -1.0493],
          [ 2.6185, -1.0536],
          [ 2.6026, -1.0653],
          ...,
          [ 2.6191, -1.0497],
          [ 0.0000, -0.0000],
          [ 2.5568, -0.8295]],

         [[ 2.6728, -0.8989],
          [ 2.6822, -1.0733],
          [ 2.6476, -1.0628],
          ...,
          [ 2.6672, -0.8944],
          [ 2.5568, -0.8295],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6908, -1.0623],
          [ 2.6860, -1.0754],
          ...,
          [ 2.6737, -0.8911],
          [ 2.6609, -1.0647],
          [ 2.6988, -0.9069]],

         [[ 2.6908, -1.0623],
          [ 0.0000, -0.0000],
          [ 2.6520, -0.8807],
          ...,
          [ 2.6405, -0.8728],
          [ 2.6585, -1.0669],
          [ 2.6607, -0.8837]],

         [[ 2.6860, -1.0754],
          [ 2.6520, -0.8807],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6415, -0.8779],
          [ 2.6559, -1.0786],
          [ 2.6799, -1.0746]],

         ...,

         [[ 2.6737, -0.8911],
          [ 2.6405, -0.8728],
          [ 2.6415, -0.8779],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6021, -0.8589],
          [ 2.6745, -1.0711]],

         [[ 2.6609, -1.0647],
          [ 2.6585, -1.0669],
          [ 2.6559, -1.0786],
          ...,
          [ 2.6021, -0.8589],
          [ 0.0000, -0.0000],
          [ 2.6587, -1.0672]],

         [[ 2.6988, -0.9069],
          [ 2.6607, -0.8837],
          [ 2.6799, -1.0746],
          ...,
          [ 2.6745, -1.0711],
          [ 2.6587, -1.0672],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6736, -0.8829],
          [ 2.6843, -1.0505],
          ...,
          [ 2.6742, -1.0648],
          [ 2.6729, -0.8871],
          [ 2.6459, -1.0549]],

         [[ 2.6736, -0.8829],
          [ 0.0000, -0.0000],
          [ 2.7564, -0.9507],
          ...,
          [ 2.6859, -1.0387],
          [ 2.6905, -1.0319],
          [ 2.6268, -0.8493]],

         [[ 2.6843, -1.0505],
          [ 2.7564, -0.9507],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6947, -1.0553],
          [ 2.7004, -1.0536],
          [ 2.6431, -0.8584]],

         ...,

         [[ 2.6742, -1.0648],
          [ 2.6859, -1.0387],
          [ 2.6947, -1.0553],
          ...,
          [ 0.0000, -0.0000],
          [ 2.7063, -0.9104],
          [ 2.6208, -0.8575]],

         [[ 2.6729, -0.8871],
          [ 2.6905, -1.0319],
          [ 2.7004, -1.0536],
          ...,
          [ 2.7063, -0.9104],
          [ 0.0000, -0.0000],
          [ 2.6281, -0.8578]],

         [[ 2.6459, -1.0549],
          [ 2.6268, -0.8493],
          [ 2.6431, -0.8584],
          ...,
          [ 2.6208, -0.8575],
          [ 2.6281, -0.8578],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6647, -0.9962],
          [ 2.7340, -0.9256],
          ...,
          [ 2.7081, -0.9028],
          [ 2.7035, -0.8962],
          [ 2.8477, -1.0733]],

         [[ 2.6647, -0.9962],
          [ 0.0000, -0.0000],
          [ 2.6818, -1.0879],
          ...,
          [ 2.6774, -1.0845],
          [ 2.6750, -1.0893],
          [ 2.7015, -0.9019]],

         [[ 2.7340, -0.9256],
          [ 2.6818, -1.0879],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6549, -0.8876],
          [ 2.6552, -0.8894],
          [ 2.7198, -0.9196]],

         ...,

         [[ 2.7081, -0.9028],
          [ 2.6774, -1.0845],
          [ 2.6549, -0.8876],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6385, -0.8793],
          [ 2.6961, -0.8992]],

         [[ 2.7035, -0.8962],
          [ 2.6750, -1.0893],
          [ 2.6552, -0.8894],
          ...,
          [ 2.6385, -0.8793],
          [ 0.0000, -0.0000],
          [ 2.6724, -1.0247]],

         [[ 2.8477, -1.0733],
          [ 2.7015, -0.9019],
          [ 2.7198, -0.9196],
          ...,
          [ 2.6961, -0.8992],
          [ 2.6724, -1.0247],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6062, -0.8653],
          [ 2.6542, -1.0896],
          ...,
          [ 2.6767, -1.0351],
          [ 2.6372, -0.8789],
          [ 2.6602, -0.8871]],

         [[ 2.6062, -0.8653],
          [ 0.0000, -0.0000],
          [ 2.6480, -1.0930],
          ...,
          [ 2.6690, -1.0482],
          [ 2.6278, -0.8746],
          [ 2.6474, -0.8786]],

         [[ 2.6542, -1.0896],
          [ 2.6480, -1.0930],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6559, -1.0476],
          [ 2.5992, -0.8600],
          [ 2.6122, -0.8567]],

         ...,

         [[ 2.6767, -1.0351],
          [ 2.6690, -1.0482],
          [ 2.6559, -1.0476],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6972, -0.9103],
          [ 2.7357, -0.9430]],

         [[ 2.6372, -0.8789],
          [ 2.6278, -0.8746],
          [ 2.5992, -0.8600],
          ...,
          [ 2.6972, -0.9103],
          [ 0.0000, -0.0000],
          [ 2.6936, -0.9105]],

         [[ 2.6602, -0.8871],
          [ 2.6474, -0.8786],
          [ 2.6122, -0.8567],
          ...,
          [ 2.7357, -0.9430],
          [ 2.6936, -0.9105],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.7617, -0.9435],
          [ 2.6863, -0.9865],
          ...,
          [ 2.6734, -0.9786],
          [ 2.6807, -0.9869],
          [ 2.6493, -0.8414]],

         [[ 2.7617, -0.9435],
          [ 0.0000, -0.0000],
          [ 2.6623, -0.8885],
          ...,
          [ 2.6889, -1.0974],
          [ 2.6977, -1.0997],
          [ 2.6288, -0.8699]],

         [[ 2.6863, -0.9865],
          [ 2.6623, -0.8885],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6208, -0.8700],
          [ 2.6368, -0.8774],
          [ 2.6742, -1.0997]],

         ...,

         [[ 2.6734, -0.9786],
          [ 2.6889, -1.0974],
          [ 2.6208, -0.8700],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6187, -0.8709],
          [ 2.6652, -1.1025]],

         [[ 2.6807, -0.9869],
          [ 2.6977, -1.0997],
          [ 2.6368, -0.8774],
          ...,
          [ 2.6187, -0.8709],
          [ 0.0000, -0.0000],
          [ 2.6123, -0.8687]],

         [[ 2.6493, -0.8414],
          [ 2.6288, -0.8699],
          [ 2.6742, -1.0997],
          ...,
          [ 2.6652, -1.1025],
          [ 2.6123, -0.8687],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6767, -1.0086],
          [ 2.6769, -1.0136],
          ...,
          [ 2.6031, -0.8148],
          [ 2.6424, -0.9905],
          [ 2.6426, -0.9820]],

         [[ 2.6767, -1.0086],
          [ 0.0000, -0.0000],
          [ 2.6821, -0.8932],
          ...,
          [ 2.6331, -1.0447],
          [ 2.6367, -1.0447],
          [ 2.6699, -0.9959]],

         [[ 2.6769, -1.0136],
          [ 2.6821, -0.8932],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6345, -1.0470],
          [ 2.6376, -1.0468],
          [ 2.7386, -0.9223]],

         ...,

         [[ 2.6031, -0.8148],
          [ 2.6331, -1.0447],
          [ 2.6345, -1.0470],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6041, -1.0465],
          [ 2.6328, -0.9745]],

         [[ 2.6424, -0.9905],
          [ 2.6367, -1.0447],
          [ 2.6376, -1.0468],
          ...,
          [ 2.6041, -1.0465],
          [ 0.0000, -0.0000],
          [ 2.6095, -0.8130]],

         [[ 2.6426, -0.9820],
          [ 2.6699, -0.9959],
          [ 2.7386, -0.9223],
          ...,
          [ 2.6328, -0.9745],
          [ 2.6095, -0.8130],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6105, -0.8697],
          [ 2.6841, -1.0987],
          ...,
          [ 2.6407, -0.8841],
          [ 2.6748, -0.8951],
          [ 2.6561, -0.8913]],

         [[ 2.6105, -0.8697],
          [ 0.0000, -0.0000],
          [ 2.6851, -1.0934],
          ...,
          [ 2.6122, -0.8695],
          [ 2.6386, -0.8718],
          [ 2.6780, -1.0982]],

         [[ 2.6841, -1.0987],
          [ 2.6851, -1.0934],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6888, -1.0947],
          [ 2.6991, -1.0609],
          [ 2.6656, -0.8938]],

         ...,

         [[ 2.6407, -0.8841],
          [ 2.6122, -0.8695],
          [ 2.6888, -1.0947],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6811, -0.8994],
          [ 2.6888, -1.1020]],

         [[ 2.6748, -0.8951],
          [ 2.6386, -0.8718],
          [ 2.6991, -1.0609],
          ...,
          [ 2.6811, -0.8994],
          [ 0.0000, -0.0000],
          [ 2.7038, -0.9153]],

         [[ 2.6561, -0.8913],
          [ 2.6780, -1.0982],
          [ 2.6656, -0.8938],
          ...,
          [ 2.6888, -1.1020],
          [ 2.7038, -0.9153],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.7212, -0.9204],
          [ 2.6877, -1.0412],
          ...,
          [ 2.6777, -0.8890],
          [ 2.7530, -0.9451],
          [ 2.4482, -0.7464]],

         [[ 2.7212, -0.9204],
          [ 0.0000, -0.0000],
          [ 2.6859, -1.0466],
          ...,
          [ 2.6733, -1.0503],
          [ 2.7395, -0.9328],
          [ 2.4511, -0.7555]],

         [[ 2.6877, -1.0412],
          [ 2.6859, -1.0466],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6740, -1.0416],
          [ 2.6914, -1.0378],
          [ 2.4469, -0.7528]],

         ...,

         [[ 2.6777, -0.8890],
          [ 2.6733, -1.0503],
          [ 2.6740, -1.0416],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6915, -0.8941],
          [ 2.5243, -0.9702]],

         [[ 2.7530, -0.9451],
          [ 2.7395, -0.9328],
          [ 2.6914, -1.0378],
          ...,
          [ 2.6915, -0.8941],
          [ 0.0000, -0.0000],
          [ 2.4408, -0.7285]],

         [[ 2.4482, -0.7464],
          [ 2.4511, -0.7555],
          [ 2.4469, -0.7528],
          ...,
          [ 2.5243, -0.9702],
          [ 2.4408, -0.7285],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6997, -0.9057],
          [ 2.6825, -1.0669],
          ...,
          [ 2.6282, -1.0528],
          [ 2.7170, -0.9095],
          [ 2.6221, -1.0515]],

         [[ 2.6997, -0.9057],
          [ 0.0000, -0.0000],
          [ 2.6887, -1.0400],
          ...,
          [ 2.5950, -0.8297],
          [ 2.7929, -0.9926],
          [ 2.5840, -0.8227]],

         [[ 2.6825, -1.0669],
          [ 2.6887, -1.0400],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6369, -1.0426],
          [ 2.7611, -0.9544],
          [ 2.5823, -0.8331]],

         ...,

         [[ 2.6282, -1.0528],
          [ 2.5950, -0.8297],
          [ 2.6369, -1.0426],
          ...,
          [ 0.0000, -0.0000],
          [ 2.5941, -0.8089],
          [ 2.5974, -1.0531]],

         [[ 2.7170, -0.9095],
          [ 2.7929, -0.9926],
          [ 2.7611, -0.9544],
          ...,
          [ 2.5941, -0.8089],
          [ 0.0000, -0.0000],
          [ 2.5792, -0.7979]],

         [[ 2.6221, -1.0515],
          [ 2.5840, -0.8227],
          [ 2.5823, -0.8331],
          ...,
          [ 2.5974, -1.0531],
          [ 2.5792, -0.7979],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6978, -1.0773],
          [ 2.6922, -1.0774],
          ...,
          [ 2.6744, -0.8924],
          [ 2.6851, -0.8975],
          [ 2.7013, -0.9068]],

         [[ 2.6978, -1.0773],
          [ 0.0000, -0.0000],
          [ 2.6950, -1.0759],
          ...,
          [ 2.6877, -0.8999],
          [ 2.7008, -1.0628],
          [ 2.7024, -1.0556]],

         [[ 2.6922, -1.0774],
          [ 2.6950, -1.0759],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6886, -1.0786],
          [ 2.6995, -1.0542],
          [ 2.6995, -1.0434]],

         ...,

         [[ 2.6744, -0.8924],
          [ 2.6877, -0.8999],
          [ 2.6886, -1.0786],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6940, -1.0635],
          [ 2.6954, -1.0543]],

         [[ 2.6851, -0.8975],
          [ 2.7008, -1.0628],
          [ 2.6995, -1.0542],
          ...,
          [ 2.6940, -1.0635],
          [ 0.0000, -0.0000],
          [ 2.7087, -0.9168]],

         [[ 2.7013, -0.9068],
          [ 2.7024, -1.0556],
          [ 2.6995, -1.0434],
          ...,
          [ 2.6954, -1.0543],
          [ 2.7087, -0.9168],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6475, -0.9705],
          [ 2.6947, -0.8883],
          ...,
          [ 2.6742, -1.0055],
          [ 2.8396, -1.0523],
          [ 2.6831, -1.0143]],

         [[ 2.6475, -0.9705],
          [ 0.0000, -0.0000],
          [ 2.6950, -0.8885],
          ...,
          [ 2.7025, -0.8950],
          [ 2.6451, -0.9890],
          [ 2.6828, -1.0138]],

         [[ 2.6947, -0.8883],
          [ 2.6950, -0.8885],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6660, -1.0581],
          [ 2.7089, -0.8927],
          [ 2.6651, -0.8817]],

         ...,

         [[ 2.6742, -1.0055],
          [ 2.7025, -0.8950],
          [ 2.6660, -1.0581],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6617, -0.9804],
          [ 2.6773, -1.0577]],

         [[ 2.8396, -1.0523],
          [ 2.6451, -0.9890],
          [ 2.7089, -0.8927],
          ...,
          [ 2.6617, -0.9804],
          [ 0.0000, -0.0000],
          [ 2.6748, -0.9984]],

         [[ 2.6831, -1.0143],
          [ 2.6828, -1.0138],
          [ 2.6651, -0.8817],
          ...,
          [ 2.6773, -1.0577],
          [ 2.6748, -0.9984],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.6885, -1.0893],
          [ 2.6877, -1.0846],
          ...,
          [ 2.6828, -1.0954],
          [ 2.6911, -0.9039],
          [ 2.6306, -1.0842]],

         [[ 2.6885, -1.0893],
          [ 0.0000, -0.0000],
          [ 2.6718, -0.9007],
          ...,
          [ 2.6880, -1.0882],
          [ 2.7264, -0.9322],
          [ 2.6279, -1.0680]],

         [[ 2.6877, -1.0846],
          [ 2.6718, -0.9007],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6486, -0.8883],
          [ 2.7002, -0.9172],
          [ 2.6389, -1.0791]],

         ...,

         [[ 2.6828, -1.0954],
          [ 2.6880, -1.0882],
          [ 2.6486, -0.8883],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6797, -1.0371],
          [ 2.6309, -1.0820]],

         [[ 2.6911, -0.9039],
          [ 2.7264, -0.9322],
          [ 2.7002, -0.9172],
          ...,
          [ 2.6797, -1.0371],
          [ 0.0000, -0.0000],
          [ 2.6307, -1.0265]],

         [[ 2.6306, -1.0842],
          [ 2.6279, -1.0680],
          [ 2.6389, -1.0791],
          ...,
          [ 2.6309, -1.0820],
          [ 2.6307, -1.0265],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6557, -0.8570],
          [ 2.6348, -0.8529],
          ...,
          [ 2.6213, -0.8451],
          [ 2.6639, -0.8478],
          [ 2.6325, -0.8515]],

         [[ 2.6557, -0.8570],
          [ 0.0000, -0.0000],
          [ 2.7007, -1.0493],
          ...,
          [ 2.6962, -1.0371],
          [ 2.6998, -1.0205],
          [ 2.6992, -1.0454]],

         [[ 2.6348, -0.8529],
          [ 2.7007, -1.0493],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6883, -0.8876],
          [ 2.7600, -0.9337],
          [ 2.7040, -0.8995]],

         ...,

         [[ 2.6213, -0.8451],
          [ 2.6962, -1.0371],
          [ 2.6883, -0.8876],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6817, -0.9832],
          [ 2.6853, -1.0427]],

         [[ 2.6639, -0.8478],
          [ 2.6998, -1.0205],
          [ 2.7600, -0.9337],
          ...,
          [ 2.6817, -0.9832],
          [ 0.0000, -0.0000],
          [ 2.6838, -1.0003]],

         [[ 2.6325, -0.8515],
          [ 2.6992, -1.0454],
          [ 2.7040, -0.8995],
          ...,
          [ 2.6853, -1.0427],
          [ 2.6838, -1.0003],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6387, -0.8787],
          [ 2.6839, -1.0672],
          ...,
          [ 2.6704, -1.0855],
          [ 2.6833, -1.0810],
          [ 2.6837, -1.0847]],

         [[ 2.6387, -0.8787],
          [ 0.0000, -0.0000],
          [ 2.6889, -1.0558],
          ...,
          [ 2.6739, -1.0790],
          [ 2.6860, -1.0746],
          [ 2.6695, -0.8943]],

         [[ 2.6839, -1.0672],
          [ 2.6889, -1.0558],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6819, -1.0603],
          [ 2.6974, -1.0639],
          [ 2.7098, -0.9181]],

         ...,

         [[ 2.6704, -1.0855],
          [ 2.6739, -1.0790],
          [ 2.6819, -1.0603],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6788, -1.0756],
          [ 2.6796, -1.0795]],

         [[ 2.6833, -1.0810],
          [ 2.6860, -1.0746],
          [ 2.6974, -1.0639],
          ...,
          [ 2.6788, -1.0756],
          [ 0.0000, -0.0000],
          [ 2.6976, -1.0809]],

         [[ 2.6837, -1.0847],
          [ 2.6695, -0.8943],
          [ 2.7098, -0.9181],
          ...,
          [ 2.6796, -1.0795],
          [ 2.6976, -1.0809],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6865, -1.0776],
          [ 2.7104, -0.8753],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.6865, -1.0776],
          [ 0.0000, -0.0000],
          [ 2.6491, -0.9785],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 2.7104, -0.8753],
          [ 2.6491, -0.9785],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         ...,

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]],

         [[ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          ...,
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6778, -1.0352],
          [ 2.6923, -1.0273],
          ...,
          [ 2.7314, -0.9252],
          [ 2.6401, -1.0266],
          [ 2.6844, -0.8925]],

         [[ 2.6778, -1.0352],
          [ 0.0000, -0.0000],
          [ 2.6676, -0.8771],
          ...,
          [ 2.6783, -1.0441],
          [ 2.5803, -0.8359],
          [ 2.6653, -1.0459]],

         [[ 2.6923, -1.0273],
          [ 2.6676, -0.8771],
          [ 0.0000, -0.0000],
          ...,
          [ 2.7419, -0.9322],
          [ 2.6416, -1.0225],
          [ 2.6926, -0.8953]],

         ...,

         [[ 2.7314, -0.9252],
          [ 2.6783, -1.0441],
          [ 2.7419, -0.9322],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6210, -0.8442],
          [ 2.7086, -0.9078]],

         [[ 2.6401, -1.0266],
          [ 2.5803, -0.8359],
          [ 2.6416, -1.0225],
          ...,
          [ 2.6210, -0.8442],
          [ 0.0000, -0.0000],
          [ 2.6308, -1.0333]],

         [[ 2.6844, -0.8925],
          [ 2.6653, -1.0459],
          [ 2.6926, -0.8953],
          ...,
          [ 2.7086, -0.9078],
          [ 2.6308, -1.0333],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6809, -1.0417],
          [ 2.6826, -1.0379],
          ...,
          [ 2.6805, -1.0548],
          [ 2.6799, -1.0296],
          [ 2.6841, -0.9036]],

         [[ 2.6809, -1.0417],
          [ 0.0000, -0.0000],
          [ 2.6855, -0.9052],
          ...,
          [ 2.6776, -1.0792],
          [ 2.6606, -0.8905],
          [ 2.6801, -1.0654]],

         [[ 2.6826, -1.0379],
          [ 2.6855, -0.9052],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6883, -0.9076],
          [ 2.6866, -0.9061],
          [ 2.6860, -1.0583]],

         ...,

         [[ 2.6805, -1.0548],
          [ 2.6776, -1.0792],
          [ 2.6883, -0.9076],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6794, -1.0756],
          [ 2.6782, -1.0745]],

         [[ 2.6799, -1.0296],
          [ 2.6606, -0.8905],
          [ 2.6866, -0.9061],
          ...,
          [ 2.6794, -1.0756],
          [ 0.0000, -0.0000],
          [ 2.6844, -1.0570]],

         [[ 2.6841, -0.9036],
          [ 2.6801, -1.0654],
          [ 2.6860, -1.0583],
          ...,
          [ 2.6782, -1.0745],
          [ 2.6844, -1.0570],
          [ 0.0000, -0.0000]]],


        ...,


        [[[ 0.0000, -0.0000],
          [ 2.7600, -0.9469],
          [ 2.6886, -1.0212],
          ...,
          [ 2.6883, -1.0361],
          [ 2.7108, -0.9073],
          [ 2.7304, -0.9226]],

         [[ 2.7600, -0.9469],
          [ 0.0000, -0.0000],
          [ 2.7296, -0.9220],
          ...,
          [ 2.7422, -0.9321],
          [ 2.6888, -1.0375],
          [ 2.6931, -1.0365]],

         [[ 2.6886, -1.0212],
          [ 2.7296, -0.9220],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6854, -1.0252],
          [ 2.6837, -0.8880],
          [ 2.7016, -0.9009]],

         ...,

         [[ 2.6883, -1.0361],
          [ 2.7422, -0.9321],
          [ 2.6854, -1.0252],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6798, -1.0409],
          [ 2.7149, -0.9113]],

         [[ 2.7108, -0.9073],
          [ 2.6888, -1.0375],
          [ 2.6837, -0.8880],
          ...,
          [ 2.6798, -1.0409],
          [ 0.0000, -0.0000],
          [ 2.6822, -1.0394]],

         [[ 2.7304, -0.9226],
          [ 2.6931, -1.0365],
          [ 2.7016, -0.9009],
          ...,
          [ 2.7149, -0.9113],
          [ 2.6822, -1.0394],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6682, -1.0356],
          [ 2.6892, -0.8900],
          ...,
          [ 2.6691, -1.0801],
          [ 2.6484, -0.9897],
          [ 2.6121, -0.8653]],

         [[ 2.6682, -1.0356],
          [ 0.0000, -0.0000],
          [ 2.6370, -0.9627],
          ...,
          [ 2.6926, -0.9007],
          [ 2.8045, -1.0156],
          [ 2.6377, -0.8592]],

         [[ 2.6892, -0.8900],
          [ 2.6370, -0.9627],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6624, -1.0032],
          [ 2.8363, -1.0609],
          [ 2.6461, -0.8561]],

         ...,

         [[ 2.6691, -1.0801],
          [ 2.6926, -0.9007],
          [ 2.6624, -1.0032],
          ...,
          [ 0.0000, -0.0000],
          [ 2.7180, -0.9117],
          [ 2.6185, -0.8654]],

         [[ 2.6484, -0.9897],
          [ 2.8045, -1.0156],
          [ 2.8363, -1.0609],
          ...,
          [ 2.7180, -0.9117],
          [ 0.0000, -0.0000],
          [ 2.6503, -0.8533]],

         [[ 2.6121, -0.8653],
          [ 2.6377, -0.8592],
          [ 2.6461, -0.8561],
          ...,
          [ 2.6185, -0.8654],
          [ 2.6503, -0.8533],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.5694, -0.8537],
          [ 2.6761, -1.0907],
          ...,
          [ 2.6757, -1.0981],
          [ 2.6758, -1.0963],
          [ 2.6359, -0.8816]],

         [[ 2.5694, -0.8537],
          [ 0.0000, -0.0000],
          [ 2.6401, -1.0793],
          ...,
          [ 2.6411, -1.0868],
          [ 2.6420, -1.0857],
          [ 2.6394, -1.0850]],

         [[ 2.6761, -1.0907],
          [ 2.6401, -1.0793],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6831, -1.0874],
          [ 2.6855, -1.0827],
          [ 2.6822, -1.0866]],

         ...,

         [[ 2.6757, -1.0981],
          [ 2.6411, -1.0868],
          [ 2.6831, -1.0874],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6437, -0.8855],
          [ 2.6805, -1.0956]],

         [[ 2.6758, -1.0963],
          [ 2.6420, -1.0857],
          [ 2.6855, -1.0827],
          ...,
          [ 2.6437, -0.8855],
          [ 0.0000, -0.0000],
          [ 2.6809, -1.0931]],

         [[ 2.6359, -0.8816],
          [ 2.6394, -1.0850],
          [ 2.6822, -1.0866],
          ...,
          [ 2.6805, -1.0956],
          [ 2.6809, -1.0931],
          [ 0.0000, -0.0000]]]], device='cuda:0')
Applying noise...
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
tensor([[[[ 0.0000, -0.0000],
          [ 2.6691, -0.8824],
          [ 2.6646, -0.8802],
          ...,
          [ 2.6664, -0.8807],
          [ 2.6584, -0.8759],
          [ 2.6663, -0.8809]],

         [[ 2.6691, -0.8824],
          [ 0.0000, -0.0000],
          [ 2.6791, -1.0979],
          ...,
          [ 2.6837, -1.0973],
          [ 2.6795, -1.0962],
          [ 2.6829, -1.1001]],

         [[ 2.6646, -0.8802],
          [ 2.6791, -1.0979],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6776, -1.0945],
          [ 2.6247, -0.8671],
          [ 2.6779, -1.0975]],

         ...,

         [[ 2.6664, -0.8807],
          [ 2.6837, -1.0973],
          [ 2.6776, -1.0945],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6245, -0.8655],
          [ 2.6823, -1.0969]],

         [[ 2.6584, -0.8759],
          [ 2.6795, -1.0962],
          [ 2.6247, -0.8671],
          ...,
          [ 2.6245, -0.8655],
          [ 0.0000, -0.0000],
          [ 2.6252, -0.8667]],

         [[ 2.6663, -0.8809],
          [ 2.6829, -1.1001],
          [ 2.6779, -1.0975],
          ...,
          [ 2.6823, -1.0969],
          [ 2.6252, -0.8667],
          [ 0.0000, -0.0000]]],


        [[[ 0.0000, -0.0000],
          [ 2.6261, -0.8774],
          [ 2.5900, -0.8682],
          ...,
          [ 2.6703, -1.1010],
          [ 2.6230, -1.0902],
          [ 2.6759, -1.0948]],

         [[ 2.6261, -0.8774],
          [ 0.0000, -0.0000],
          [ 2.6025, -0.8643],
          ...,
          [ 2.6853, -1.0923],
          [ 2.5569, -0.8399],
          [ 2.6930, -1.0824]],

         [[ 2.5900, -0.8682],
          [ 2.6025, -0.8643],
          [ 0.0000, -0.0000],
          ...,
          [ 2.6581, -1.0957],
          [ 2.6168, -1.0918],
          [ 2.6630, -1.0878]],

         ...,

         [[ 2.6703, -1.1010],
          [ 2.6853, -1.0923],
          [ 2.6581, -1.0957],
          ...,
          [ 0.0000, -0.0000],
          [ 2.6251, -1.0812],
          [ 2.6882, -1.0903]],

         [[ 2.6230, -1.0902],
          [ 2.5569, -0.8399],
          [ 2.6168, -1.0918],
          ...,
          [ 2.6251, -1.0812],
          [ 0.0000, -0.0000],
          [ 2.6256, -1.0683]],

         [[ 2.6759, -1.0948],
          [ 2.6930, -1.0824],
          [ 2.6630, -1.0878],
          ...,
          [ 2.6882, -1.0903],
          [ 2.6256, -1.0683],
          [ 0.0000, -0.0000]]]], device='cuda:0')
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 9, in <module>
    from diffusion_discrete_aug import DiscreteDenoisingDiffusion
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 350
    pass
    ^^^^
IndentationError: expected an indented block after 'for' statement on line 342
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 5732], edge_attr=[5732, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 77, in main
    trainer.predict(model, data_loaders['test'], ckpt_path = cfg.general.ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 845, in predict
    return call._call_and_handle_interrupt(
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 887, in _predict_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1013, in _run_stage
    return self.predict_loop.run()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 112, in run
    self._predict_step(batch, batch_idx, dataloader_idx)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 228, in _predict_step
    predictions = call._call_strategy_hook(trainer, "predict_step", *step_kwargs.values())
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 287, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/ddp.py", line 349, in predict_step
    return self.model.predict_step(*args, **kwargs)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 334, in predict_step
    self.print(noisy_data.X_t.shape, noisy_data.E_t.shape, noisy_data.y_t.shape)
AttributeError: 'dict' object has no attribute 'X_t'

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1736, 1], edge_index=[2, 6864], edge_attr=[6864, 2], y=[12, 0], batch=[1736], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 77, in main
    trainer.predict(model, data_loaders['test'], ckpt_path = cfg.general.ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 845, in predict
    return call._call_and_handle_interrupt(
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 887, in _predict_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1013, in _run_stage
    return self.predict_loop.run()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 112, in run
    self._predict_step(batch, batch_idx, dataloader_idx)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 228, in _predict_step
    predictions = call._call_strategy_hook(trainer, "predict_step", *step_kwargs.values())
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 287, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/ddp.py", line 349, in predict_step
    return self.model.predict_step(*args, **kwargs)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 334, in predict_step
    self.print(noisy_data.X.shape, noisy_data.E.shape, noisy_data.y.shape)
AttributeError: 'dict' object has no attribute 'X'

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 6868], edge_attr=[6868, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(12, 0), dtype=torch.int64), 'node_mask': tensor([[ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
{'t_int': tensor([[20.],
        [20.]], device='cuda:0'), 't': tensor([[1.],
        [1.]], device='cuda:0'), 'beta_t': tensor([[1.],
        [1.]], device='cuda:0'), 'alpha_s_bar': tensor([[0.0060],
        [0.0060]], device='cuda:0'), 'alpha_t_bar': tensor([[9.6779e-10],
        [9.6779e-10]], device='cuda:0'), 'X_t': tensor([[[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]]], device='cuda:0'), 'E_t': tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0'), 'y_t': tensor([], device='cuda:0', size=(2, 0), dtype=torch.int64), 'node_mask': tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True],
        [True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]], device='cuda:0')}
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7256], edge_attr=[7256, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7170], edge_attr=[7170, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 77, in main
    trainer.predict(model, data_loaders['test'], ckpt_path = cfg.general.ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 845, in predict
    return call._call_and_handle_interrupt(
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 887, in _predict_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1013, in _run_stage
    return self.predict_loop.run()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 112, in run
    self._predict_step(batch, batch_idx, dataloader_idx)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 228, in _predict_step
    predictions = call._call_strategy_hook(trainer, "predict_step", *step_kwargs.values())
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 287, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/ddp.py", line 349, in predict_step
    return self.model.predict_step(*args, **kwargs)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 334, in predict_step
    self.print(noisy_data['A_t'].shape)
KeyError: 'A_t'

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1736, 1], edge_index=[2, 7420], edge_attr=[7420, 2], y=[12, 0], batch=[1736], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([2, 150, 150, 2])
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 6678], edge_attr=[6678, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1736, 1], edge_index=[2, 7086], edge_attr=[7086, 2], y=[12, 0], batch=[1736], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2]) torch.Size([12, 0])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2]) torch.Size([2, 0])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7190], edge_attr=[7190, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1711, 1], edge_index=[2, 7062], edge_attr=[7062, 2], y=[12, 0], batch=[1711], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 77, in main
    trainer.predict(model, data_loaders['test'], ckpt_path = cfg.general.ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 845, in predict
    return call._call_and_handle_interrupt(
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 887, in _predict_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1013, in _run_stage
    return self.predict_loop.run()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 112, in run
    self._predict_step(batch, batch_idx, dataloader_idx)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 228, in _predict_step
    predictions = call._call_strategy_hook(trainer, "predict_step", *step_kwargs.values())
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 287, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/ddp.py", line 349, in predict_step
    return self.model.predict_step(*args, **kwargs)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 347, in predict_step
    sampled_s, discrete_sampled_s = self.sample_p_zs_given_zt(s_norm, t_norm, X, E, y, node_mask)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 698, in sample_p_zs_given_zt
    extra_data = self.compute_extra_data(noisy_data)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 755, in compute_extra_data
    extra_y = torch.cat((extra_y, t), dim=1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 2 but got size 12 for tensor number 1 in the list.

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 6274], edge_attr=[6274, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
torch.Size([12, 1]) torch.Size([12, 1])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 6384], edge_attr=[6384, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1711, 1], edge_index=[2, 5262], edge_attr=[5262, 2], y=[12, 0], batch=[1711], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Error executing job with overrides: ['dataset.name=reddit', 'general.name=AUG_reddit uniform', 'model.transition=uniform', 'general.wandb=disabled', 'general.ckpt_path=/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'train.batch_size=12', 'general.setting=augment']
Traceback (most recent call last):
  File "/home/allenwang/gad_diff/gad_lggm/src/main_gad.py", line 77, in main
    trainer.predict(model, data_loaders['test'], ckpt_path = cfg.general.ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 845, in predict
    return call._call_and_handle_interrupt(
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 41, in _call_and_handle_interrupt
    return trainer.strategy.launcher.launch(trainer_fn, *args, trainer=trainer, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/launchers/subprocess_script.py", line 91, in launch
    return function(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 887, in _predict_impl
    results = self._run(model, ckpt_path=ckpt_path)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 975, in _run
    results = self._run_stage()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/trainer.py", line 1013, in _run_stage
    return self.predict_loop.run()
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/utilities.py", line 177, in _decorator
    return loop_run(self, *args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 112, in run
    self._predict_step(batch, batch_idx, dataloader_idx)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py", line 228, in _predict_step
    predictions = call._call_strategy_hook(trainer, "predict_step", *step_kwargs.values())
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/call.py", line 287, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/strategies/ddp.py", line 349, in predict_step
    return self.model.predict_step(*args, **kwargs)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 350, in predict_step
    sampled_s, discrete_sampled_s = self.sample_p_zs_given_zt(s_norm, t_norm, X, E, y, node_mask)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 701, in sample_p_zs_given_zt
    extra_data = self.compute_extra_data(noisy_data)
  File "/home/allenwang/gad_diff/gad_lggm/src/diffusion_discrete_aug.py", line 758, in compute_extra_data
    extra_y = torch.cat((extra_y, t), dim=1)
RuntimeError: Sizes of tensors must match except in dimension 1. Expected size 2 but got size 12 for tensor number 1 in the list.

Set the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1711, 1], edge_index=[2, 6680], edge_attr=[6680, 2], y=[12, 0], batch=[1711], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7308], edge_attr=[7308, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
tensor([[[1],
         [1],
         [1],
         ...,
         [0],
         [0],
         [0]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        ...,

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         ...,
         [1],
         [1],
         [1]]], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
tensor([[[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]],

        [[1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1],
         [1]]], device='cuda:0')
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7276], edge_attr=[7276, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) tensor([[[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         ...,

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]],

         [[0, 0],
          [0, 0],
          [0, 0],
          ...,
          [0, 0],
          [0, 0],
          [0, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         ...,

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]],


        ...,


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         ...,

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]],

         [[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]]]], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) tensor([[[[1, 0],
          [1, 0],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [0, 1]],

         ...,

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[1, 0],
          [0, 1],
          [0, 1],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [1, 0],
          [1, 0]]],


        [[[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [0, 1],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[1, 0],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [1, 0]],

         ...,

         [[0, 1],
          [0, 1],
          [0, 1],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]],

         [[0, 1],
          [1, 0],
          [1, 0],
          ...,
          [0, 1],
          [1, 0],
          [0, 1]],

         [[0, 1],
          [0, 1],
          [1, 0],
          ...,
          [1, 0],
          [0, 1],
          [1, 0]]]], device='cuda:0')
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1684, 1], edge_index=[2, 7108], edge_attr=[7108, 2], y=[12, 0], batch=[1684], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 6136], edge_attr=[6136, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1736, 1], edge_index=[2, 6836], edge_attr=[6836, 2], y=[12, 0], batch=[1736], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
time step: 19
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 18
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 17
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 16
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 15
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 14
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 13
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 12
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 11
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 10
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 9
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 8
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 7
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 6
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 5
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 4
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 3
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 2
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 1
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 0
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1668, 1], edge_index=[2, 6976], edge_attr=[6976, 2], y=[12, 0], batch=[1668], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1736, 1], edge_index=[2, 6598], edge_attr=[6598, 2], y=[12, 0], batch=[1736], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes 150
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 5890], edge_attr=[5890, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        ...,
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True],
        [True, True, True,  ..., True, True, True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[ True,  True,  True,  ..., False, False, False],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        ...,
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True],
        [ True,  True,  True,  ...,  True,  True,  True]], device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True],
        [True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1710, 1], edge_index=[2, 6646], edge_attr=[6646, 2], y=[12, 0], batch=[1710], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150,  57, 150, 127, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150,  18, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150,  60, 150, 150, 150, 150, 150, 150, 150,  80, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([ 86, 150, 150, 150, 150, 150, 150, 150,  61, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150,  63, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([ 68, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
n_nodes tensor([150, 150], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7126], edge_attr=[7126, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150,  57, 150, 127, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150,  18, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150,  60, 150, 150, 150, 150, 150, 150, 150,  80, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([ 86, 150, 150, 150, 150, 150, 150, 150,  61, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150,  63, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([ 68, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
time step: 19
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 18
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 17
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 16
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 15
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 14
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 13
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 12
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 11
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 10
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 9
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 8
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 7
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 6
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 5
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 4
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 3
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 2
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 1
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 0
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
============================================================================================================
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/inter_epoch
file: /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op
  warnings.warn("Initializing zero-element tensors is a no-op")
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/1
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 1 processes
----------------------------------------------------------------------------------------------------

You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/utilities/migration/utils.py:51: PossibleUserWarning: The loaded checkpoint was produced with Lightning v2.3.0, which is newer than your current Lightning version: v2.0.4
  rank_zero_warn(
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at /home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:432: PossibleUserWarning: The dataloader, predict_dataloader, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 24 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  rank_zero_warn(
/home/allenwang/miniconda3/envs/gad_v2/lib/python3.10/site-packages/pytorch_lightning/loops/prediction_loop.py:233: UserWarning: predict returned None if it was on purpose, ignore this warning...
  self._warning_cache.warn("predict returned None if it was on purpose, ignore this warning...")
/home/allenwang/gad_diff/gad_lggm/src
{'general': {'name': 'AUG_reddit uniform', 'wandb': 'disabled', 'gpus': 1, 'setting': 'augment', 'resume': None, 'ckpt_path': '/home/allenwang/gad_diff/gad_lggm/outputs/reddit-seed uniform/checkpoints/reddit-seed uniform/last.ckpt', 'sample_every_val': 4, 'check_val_every_n_epochs': 10, 'samples_to_generate': 100, 'samples_to_save': 3, 'chains_to_save': 1, 'log_every_steps': 50, 'number_chain_steps': 8, 'final_model_samples_to_generate': 100, 'final_model_samples_to_save': 30, 'final_model_chains_to_save': 20, 'num_train': -1}, 'model': {'type': 'discrete', 'transition': 'uniform', 'model': 'graph_tf', 'diffusion_steps': 500, 'diffusion_noise_schedule': 'cosine', 'n_layers': 5, 'extra_features': 'all', 'hidden_mlp_dims': {'X': 256, 'E': 128, 'y': 128}, 'hidden_dims': {'dx': 256, 'de': 64, 'dy': 64, 'n_head': 8, 'dim_ffX': 256, 'dim_ffE': 128, 'dim_ffy': 128}, 'lambda_train': [5, 0], 'normalize_factors': [2, 1, 1], 'norm_biases': [0, 0, 0]}, 'train': {'n_epochs': 300, 'batch_size': 12, 'accumulate_grad_batches': 1, 'lr': 0.0002, 'clip_grad': None, 'save_model': True, 'num_workers': 0, 'ema_decay': 0, 'weight_decay': 1e-12, 'seed': 0, 'progress_bar': False, 'optimizer': 'adamw'}, 'dataset': {'datadir': 'graph/', 'name': 'reddit', 'remove_h': None, 'sample': 'eco'}, 'augment': {'diffusion_steps': 20}}
222 reddit
Size of dataset 116 15 146
Distribution of Number of Nodes: tensor([0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0076, 0.0076, 0.0000,
        0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0076, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0076, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.9389])
Distribution of Node Types: tensor([1])
Distribution of Edge Types: tensor([0.9735, 0.0265])
DataBatch(x=[1800, 1], edge_index=[2, 7798], edge_attr=[7798, 2], y=[12, 0], batch=[1800], ptr=[13])
{'X': 7, 'E': 2, 'y': 12} {'X': 1, 'E': 2, 'y': 0}
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150,  57, 150, 127, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150,  18, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150,  60, 150, 150, 150, 150, 150, 150, 150,  80, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([ 86, 150, 150, 150, 150, 150, 150, 150,  61, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150,  63, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([ 68, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150],
       device='cuda:0')
Applying noise...
torch.Size([12, 150, 150, 2]) torch.Size([12, 150, 1]) torch.Size([12, 0])
Predicting...
time step: 19
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 18
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 17
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 16
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 15
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 14
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 13
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 12
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 11
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 10
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 9
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 8
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 7
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 6
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 5
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 4
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 3
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 2
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 1
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
time step: 0
111
torch.Size([12, 1]) torch.Size([12, 1])
Forward pass... torch.Size([12, 150, 1]) torch.Size([12, 150, 6]) torch.Size([12, 150])
333
torch.Size([12, 150, 1]) torch.Size([12, 150, 150, 2])
n_nodes tensor([150, 150], device='cuda:0')
Applying noise...
torch.Size([2, 150, 150, 2]) torch.Size([2, 150, 1]) torch.Size([2, 0])
Predicting...
time step: 19
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 18
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 17
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 16
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 15
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 14
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 13
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 12
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 11
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 10
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 9
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 8
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 7
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 6
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 5
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 4
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 3
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 2
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 1
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
time step: 0
111
torch.Size([2, 1]) torch.Size([2, 1])
Forward pass... torch.Size([2, 150, 1]) torch.Size([2, 150, 6]) torch.Size([2, 150])
333
torch.Size([2, 150, 1]) torch.Size([2, 150, 150, 2])
============================================================================================================
